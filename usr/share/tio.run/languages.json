{
	"05ab1e": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Adriandmen/05AB1E/tree/fb4a2ce2bce6660e1a680a74dd61b72c945e6c3b",
		"name": "05AB1E (legacy)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"1l-a": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/1L_a",
		"name": "1L_a",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": " xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\n xxxx   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\n xxxx x       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\n xxxx    xxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\n xxxxxx    xx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\n xxxxxxxxx  x xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\n            x xxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxx xx   xxx   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxx   xx         xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxx xxxxxx xxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxx        xxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxx x        xxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxx   xxxxxx xxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        xxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  xxxxx xxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  xxxxxxxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxx   xxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     x xxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x  x        xxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      xxxxxx xxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  xxxxxx   xxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxx x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       x\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
						}
					}
				],
				"response": "A"
			}
		},
		"update": "git"
	},
	"1l-aoi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stasoid/1L_AOI",
		"name": "1L_AOI",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-eu"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "    +\n ++\n+      +\n\n +    +\n      +\n          +    +\n      +       +\n\n+              +   +\n      +\n      +     +\n      +   +        +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +  +         +\n      +           +\n      +   +       +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +           +\n      +\n      +        +   +\n      +\n      +\n      +               +\n      +\n      +  +             +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n      +\n\n +      +\n\n\n +  ++  +"
						}
					}
				],
				"response": "Hi"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"2dfuck": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://gitlab.com/TheWastl/2DFuck",
		"name": "2DFuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".!.!..!.!....!..!..!.!.!.!.!..!.!..!...!..!.!..!...!..!.!....!..!.!.!..!....!.!......!.!.!.!.!...!.!..!.!....!.!...!..!.!..!..!.!..!...!..!..!.!....!.!....!."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"2l": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/2L",
		"name": "2L",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "*   +\n*+*\n ************************************************************************+\n+  +\n                                 +                                      +\n +                            +*\n   *********************************+\n+                               +\n  +                                +"
						}
					}
				],
				"response": "Hi"
			}
		},
		"update": "git"
	},
	"2sable": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Adriandmen/2sable",
		"name": "2sable",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"33": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TheOnlyMrCat/33",
		"name": "33",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"p"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"3var": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/3var",
		"name": "3var",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "iisssaa/>emaa->e#aamam->e#dddddddddddddddddddddddddPiiiiiiiiiiiiiiiiiiiiiiiiiiiiiPiiiiiiiPPiiiPriissaa*>iiiiiiiiiiiiPriisaamaaaa*>Priisssaa/>emaa->e#aamam->e#ddddddddddPiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiddddddddPiiiPddddddPddddddddPriissaa*>iP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"4": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/urielieli/py-four",
		"name": "4",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "3.6000160103602136033260433605446067260787008070200908000120902111120111011015065095105105115055035075115125105085044"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"7": {
		"categories": [
			"recreational"
		],
		"encoding": "it's complicated",
		"link": "https://esolangs.org/wiki/7",
		"name": "7",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "5325101303040432004513151401430134321027403"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"99": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/99",
		"name": "99",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "999 9 9\n99 99999999 999 9\n99\n99 99999 9 999 9\n99\n99 99 999 999999\n99\n99\n99 9999999 9999 999 9\n99\n99 99 9999999 9 999 9 999 9 999 9\n99\n99 99 999999 9 999999 9\n99\n9999\n99 99999 999 999999 999 9\n99\n99 9999999 9999 9 999 9\n99\n99 99 999999 9\n99\n99 99 999999 999 9\n99\n99 99999 9999999 9\n99"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"a-gram": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/p1xels/a-gram",
		"name": "a-gram",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "☰䷩䷩䷩䷩䷩䷩䷩䷏䷩䷩䷩䷩䷩䷩䷩䷩⚌\n䷀䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷨䷶⚌\n䷩䷩䷩䷩䷩䷩䷩䷶⚌\n䷶⚌\n䷩䷩䷩⚌\n☰䷩䷩䷩䷩䷩䷩䷏䷨䷨䷨䷨䷨⚌\n☰䷩䷩䷩䷩䷩䷏䷨䷨䷨䷨⚌\n䷀䷨䷨䷨䷨䷨䷨䷨䷨䷶⚌\n䷨䷨䷨䷨䷨䷨䷨䷨䷶⚌\n䷩䷩䷩䷶⚌\n䷨䷨䷨䷨䷨䷨䷶⚌\n䷨䷨䷨䷨䷨䷨䷨䷨⚌\n☰䷩䷩䷩䷩䷩䷏䷨䷨䷨⚌\n☰䷩䷩䷩䷩䷩䷩䷩䷩䷩⚌"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"a-pear-tree": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/A_Pear_Tree",
		"name": "A Pear Tree",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#r3TQJ\nprint(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"abc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://homepages.cwi.nl/~steven/abc/",
		"name": "ABC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "WRITE \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"abc-assembler": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Ourous/abc-wrapper-linux",
		"name": "ABC-assembler",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".start __start\n__start\n\tprint \"Hello, World!\"\n.d 0 0\n\trtn"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-b"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"accbb": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/Esolangs/tree/master/Acc!!",
		"name": "Acc!!",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "108\nWrite 72\nWrite 101\nWrite _\nWrite _\nWrite 111\nWrite 44\nWrite 32\nWrite 87\nWrite 111\nWrite 114\nWrite _\nWrite 100\nWrite 33"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aceto": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aceto/aceto",
		"name": "Aceto",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "o,or\nl Wl\nle!d\n\"H\"p"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"actually": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Mego/Seriously",
		"name": "Actually",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ada-gnat": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/gnat/",
		"name": "Ada (GNAT)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "with Ada.Text_IO;\nuse Ada.Text_IO;\n\nprocedure Main is\nbegin\n  Put_Line (\"Hello, World!\");\nend Main;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"adapt": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/adapt",
		"name": "Adapt",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"addpp": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/cairdcoinheringaahing/AddPlusPlus",
		"name": "Add++",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "D,f,^,\"Hello, World!\"\n$f\nO"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"adjust": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/adjust",
		"name": "ADJUST",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": " ;I-      &  e$      &  m-        &  g2Ph$      &  a2$      &  n$      &  e2+-      &  g2Ph$      &  OPh$      &  m-      &  e-      &  n-\n}     AgR};      AgR};      A=AgR};         AgR};       AgR};      AgR};        AgR};         AgR};        AgR};      AgR};      AgR};      AC"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"agda": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://wiki.portal.chalmers.se/agda",
		"name": "Agda",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "open import IO\n\nmain = run (putStr \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "no-version"
	},
	"agony": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/royvanrijn/JAgony",
		"name": "Agony",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<[.<]$$$,{}~<~)+{~*@+{${)~*~)~)~@<-"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ahead": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ajc2/ahead",
		"name": "Ahead",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"W@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aheui": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aheui/pyaheui",
		"name": "Aheui (esotope)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "발따밤따빠받나파빠밣다빠밦다빠받타밢밢따밦다밤밣따밦밦따빠밣다파받따빠받다파빠빠밠타밣밢따아멓희 "
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"alchemist": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/bforte/Alchemist",
		"name": "Alchemist",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "_->Out_\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"algol68g": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://jmvdveer.home.xs4all.nl/algol.html",
		"name": "ALGOL 68 (Genie)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"alice": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/alice",
		"name": "Alice",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "/OH!lloo /\n@\"\"edlr,W\\ "
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"alice-bob": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/bforte/alice-bob",
		"name": "Alice & Bob",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(((((((((((()()()()){}){}){}()))){}{}())[][][][])[][])[[]]())[[][][][][]]())([([]([])[][]{})]()()()([[]](([()()()]([([][][])](((({}()){}))){}{})))))"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-a"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aliceml": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aliceml/aliceml",
		"name": "Alice ML",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");\n\nval _ = OS.Process.exit(OS.Process.success);"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"alphabeta": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/alphabeta",
		"name": "AlphaBeta",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "kjjjggDLeaCLcbbbCLLaaaCLjjjggDLjhhDLsFihhDLCLaaaCLdaaaaCLdaaCLsFiiDL"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"alphabetti-spaghetti": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stasoid/Alphabetti-spaghetti",
		"name": "Alphabetti spaghetti",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "o"
						}
					}
				],
				"response": "0"
			}
		},
		"update": "git"
	},
	"alphuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "Alphuck",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "iiciccepepceaiiiaiaiaicccsascciijceeeeeejccijjccjcejaajaajcccjeeejaajaaijcccej"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"alumin": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Alumin",
		"name": "Alumin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "hhdtdadhatdoddhhhgahhhhhadohhhhhhhadodohhhadoydhhgddhhdtdaaohhhhcoyhhhhhddaaaoydohhhadohhhdacdohhdtdacohhhco"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"amnesiac-from-minsk": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/pavelbraginskiy/TheAmnesiacFromMinsk",
		"name": "The Amnesiac From Minsk",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "L1\t +\t =\t -\n0:\t-0;\t-1;\t+55;\t@1\n1:\t-0;\t-2;\t+56;\t@2\n2:\t-0;\t-3;\t+55;\t@3\n3:\t-0;\t-4;\t+56;\t@2\n4:\t-0;\t-5;\t+55;\t@5\n5:\t-0;\t-6;\t+56;\t@3\n6:\t-0;\t-7;\t+55;\t@3\n7:\t-0;\t-8;\t+56;\t@2\n8:\t-0;\t-9;\t+55;\t@2\n9:\t-0;\t-10;\t+56;\t@2\n10:\t-0;\t-11;\t+55;\t@2\n11:\t-0;\t-12;\t+56;\t@3\n12:\t-0;\t-13;\t+55;\t@2\n13:\t-0;\t-14;\t+56;\t@3\n14:\t-0;\t-15;\t+55;\t@4\n15:\t-0;\t-16;\t+56;\t@3\n16:\t-0;\t-17;\t+55;\t@2\n17:\t-0;\t-18;\t+56;\t@3\n18:\t-0;\t-19;\t+55;\t@4\n19:\t-0;\t-20;\t+56;\t@3\n20:\t-0;\t-21;\t+55;\t@2\n21:\t-0;\t-22;\t+56;\t@5\n22:\t-0;\t-23;\t+55;\t@3\n23:\t-0;\t-24;\t+56;\t@2\n24:\t-0;\t-25;\t+55;\t@2\n25:\t-0;\t-26;\t+56;\t@3\n26:\t-0;\t-27;\t+55;\t@5\n27:\t-0;\t-28;\t+56;\t@2\n28:\t-0;\t-29;\t+55;\t@7\n29:\t-0;\t-30;\t+56;\t@2\n30:\t-0;\t-31;\t+55;\t@2\n31:\t-0;\t-32;\t+56;\t@2\n32:\t-0;\t-33;\t+55;\t@2\n33:\t-0;\t-34;\t+56;\t@4\n34:\t-0;\t-35;\t+55;\t@2\n35:\t-0;\t-36;\t+56;\t@3\n36:\t-0;\t-37;\t+55;\t@2\n37:\t-0;\t-38;\t+56;\t@5\n38:\t-0;\t-39;\t+55;\t@2\n39:\t-0;\t-40;\t+56;\t@4\n40:\t-0;\t-41;\t+55;\t@3\n41:\t-0;\t-42;\t+56;\t@2\n42:\t-0;\t-43;\t+55;\t@3\n43:\t-0;\t-44;\t+56;\t@3\n44:\t-0;\t-45;\t+55;\t@2\n45:\t-0;\t-46;\t+56;\t@3\n46:\t-0;\t-47;\t+55;\t@4\n47:\t-0;\t-48;\t+56;\t@3\n48:\t-0;\t-49;\t+55;\t@3\n49:\t-0;\t-50;\t+56;\t@2\n50:\t-0;\t-51;\t+55;\t@5\n51:\t-0;\t-52;\t+56;\t@2\n52:\t-0;\t-53;\t+55;\t@5\n53:\t-0;\t-54;\t+56;\t@2\n54:\t+54;\t+54;\t+54;\t@2\n55:\t-0;\t-0;\t-0;\t@2\n56:\t-0;\t-0;\t-0;\t@2"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ante": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/michaeldv/ante",
		"name": "Ante",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "9♦8♥J♦A♦2♣3♥7♠J♦A♦7♦J♦J♦A♦3♦J♦5♥6♦4♥J♥A♥6♠6♠J♥A♦8♦J♦A♦8♠J♦A♦3♦J♦A♦6♠J♦A♦8♠J♦A♥3♦2♠J♥A♥2♣6♠J♥"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"anyfix": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/anyfix",
		"name": "anyfix",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!”"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"apl-dyalog": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.dyalog.com/",
		"name": "APL (Dyalog Unicode)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"apl-dyalog-classic": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://www.dyalog.com/",
		"name": "APL (Dyalog Classic)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"apl-dyalog-extended": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/abrudz/dyalog-apl-extended",
		"name": "APL (Dyalog Extended)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"apl-dzaima": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/dzaima/APL",
		"name": "APL (dzaima/APL)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"apl-ngn": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://gitlab.com/n9n/apl",
		"name": "APL (ngn/apl)",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⎕←'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"appleseed": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/appleseed",
		"name": "Appleseed",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(def start!\n  (lambda (event)\n    (print! \"Hello, World!\")))"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"arble": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/ARBLE",
		"name": "ARBLE",
		"prettify": "lua",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"archway": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/archway",
		"name": "Archway",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++..+++.-------------------------------------------------------------------.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++++++++++++.+++.------.--------.-------------------------------------------------------------------."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"archway2": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/archway",
		"name": "Archway2",
		"piggyback": "archway",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "                   \\\n /\n  >++>+++>+++>+<<<<-/>+>+>->+<<<<<-\\>>.>---.+++++++..+++.>>++++.------------.<-.<.+++.------.--------.>>+.\n  \\    \\\n\\++++>\n++++++++/                         /"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"arcyou": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Nazek42/arcyou",
		"name": "Arcyóu",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"arnoldc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://lhartikk.github.io/ArnoldC/",
		"name": "ArnoldC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "IT'S SHOWTIME\nTALK TO THE HAND \"Hello, World!\"\nYOU HAVE BEEN TERMINATED"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"asciidots": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aaronduino/asciidots",
		"name": "AsciiDots",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".-$\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"asperix": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/asperix",
		"name": "ASPeRiX",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-quiet"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"."
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"assembly-as": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://sourceware.org/binutils/docs/as/index.html",
		"name": "Assembly (as, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"assembly-fasm": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://flatassembler.net/",
		"name": "Assembly (fasm, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "format ELF executable 3\n\n_start:\n\tmov eax, 4\n\tmov ebx, 1\n\tmov ecx, msg\n\tmov edx, 13\n\tint      0x80\n\tmov eax, 1\n        mov ebx, 0\n        int 0x80\n \nmsg db \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"assembly-gcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://gcc.gnu.org/",
		"name": "Assembly (gcc, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "SYS_write = 4\nSTDOUT = 1\n.data\nhello:\n.string \"Hello, World!\"\n.globl main\nmain:\nmovl $SYS_write,%eax\nmovl $STDOUT,%ebx\nmovl $hello,%ecx\nmovl $13,%edx\nint $0x80\nret\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"assembly-jwasm": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/JWasm/JWasm",
		"name": "Assembly (JWasm, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".data\noutput db \"Hello, World!\"\n\n.code\n_start:\n\tmov eax, 4\n\tmov ebx, 1\n\tlea ecx, output\n\tmov edx, 13\n\tint      80h\n\tmov eax, 1\n\tmov ebx, 0\n\tint      80h\nend _start"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"assembly-nasm": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://www.nasm.us/",
		"name": "Assembly (nasm, x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "section .text\nglobal _start\n_start:\nmov edx,len\nmov ecx,msg\nmov ebx,1\nmov eax,4\nint 0x80\nmov ebx,0\nmov eax,1\nint 0x80\nsection .data\nmsg db \"Hello, World!\",0xa\nlen equ $ - msg"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"ats2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://sourceforge.net/projects/ats2-lang/",
		"name": "ATS2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "implement\nmain0 () = print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"attache": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Attache",
		"name": "Attache",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print[\"Hello, World!\"]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"aubergine": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Aubergine",
		"name": "Aubergine",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "=aA-a1=oA=bi+b1-Ab-bb:bA+B1=iBGolf by Quintopia\n!dlroW ,olleH"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"awk": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/gawk/manual/gawk.html",
		"name": "AWK",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "BEGIN{print \"Hello, World!\"}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"axo": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Axo",
		"name": "axo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,o%\n\\%#[<\"Hell<\n >( ^"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"backhand": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/GuyJoKing/Backhand",
		"name": "Backhand",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"ol!,ld elWHro\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bash": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/bash/",
		"name": "Bash",
		"prettify": "bash",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"bc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/bc/manual/html_mono/bc.html",
		"name": "bc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "version"
	},
	"bctbww": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/MilkyWay90/Bitwise-Cyclic-Tag-But-Way-Worse",
		"name": "Bitwise Cyclic Tag But Way Worse",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "1111111111111111111111111111111111111111111111111111111110110101101010101110101101101110111010101110111010101110111110101101110101010110101010101011011011110111011111011110101101011101110101011101011010101011010101011n0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bctbww2": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/MilkyWay90/Bitwise-Cyclic-Tag-But-Way-Worse",
		"name": "Bitwise Cyclic Tag But Way Worse 2.0",
		"piggyback": "bctbww",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "10111010111010101011111010111011101111101111101010111110111110101011111011111111101011101111101010101110101010101011101110111111101111101111111110111111101011101011111011111010101111101011101010101110101010110200000000200000000200000000200000000200000000200000000200000000200000000200000000200000000200000000200000000200000000"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"beam": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ETHproductions/beam-js",
		"name": "Beam",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'''''''''>`++++++++)@'''''''>`++++)+@+++++++@@+++@L'''''>`+++++++++)-@'''>`----)@'''''>`+++++++++++)@'''''>`+++++)-@+++@------@--------@'''''''>`---------)----@H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bean": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/patrickroberts/bean",
		"name": "Bean",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: 2623 8100 c8e5 ecec efac a0d7 eff2 ece4  &#..............\n00000010: 21                                       !"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"beanshell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.beanshell.org/",
		"name": "BeanShell",
		"prettify": "java",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"beatnik": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Beatnik",
		"name": "Beatnik",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "K QQQQQQQG ZD XO K QQJA KD ZD XO K KG KD ZD ZD ZD XO XO K B KD ZD XO K QQQQF ZD ZD XO K QQQD XO K A Z KD XO ZD XO K B KD XO ZD XO K J Z XO K QQQB XO"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"beeswax": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-lohmann/BeeswaxEsolang.jl",
		"name": "Beeswax",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "_`Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Befunge-93",
		"name": "Befunge-93",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge-93-fbbi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/FBBI",
		"name": "Befunge-93 (FBBI)",
		"piggyback": "befunge-98",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-93-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Befunge-93 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-93-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Befunge-93 (PyFunge)",
		"piggyback": "befunge-98-pyfunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-96-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Befunge-96 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"i>:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"befunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"name": "Befunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge-98": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/FBBI",
		"name": "Befunge-98 (FBBI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"befunge-98-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Befunge-98 (PyFunge)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "pip"
	},
	"bit": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/FireCubez/bit",
		"name": "Bit",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "BIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBIT 1\nBIT 0\nBIT 1\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 1\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBIT 0\nBIT 0\nBIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 0\nBIT 1\nBIT 0\nBIT 1\nBIT 1\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 1\nBIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBIT 1\nBIT 1\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBIT 0\nBIT 0\nBIT 1\nBIT 0\nBIT 0\nBYTES 8\nPRINT\nPRINTLN"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bitbitjump": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/bitbitjump",
		"name": "BitBitJump",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "       Z0:0 Z1:0\nstart: .deref p X\n       .testH X print -1\nprint: .out X\n       .add p BASE p\n       0 0 start\n       p:H X:0\n       H:72 101 108\n       108 111 44\n       32 87 111\n       114 108 100\n       33 -1\n       .include lib.bbj"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bitch": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Helen0903/bitch",
		"name": "bitch",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-c"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "#72/#101/#108/#108/#111/#44/#32/#87/#111/#114/#108/#100/#33/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"bitch-bith": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/int-e/bits/tree/master/hs",
		"name": "bitch (bit-h)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-c"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "#72/#101/#108/#108/#111/#44/#32/#87/#111/#114/#108/#100/#33/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"bitch-shifty": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/int-e/bits/tree/master/cc",
		"name": "bitch (shifty)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-c"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "#72/#101/#108/#108/#111/#44/#32/#87/#111/#114/#108/#100/#33/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"bitchanger": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/bitchanger",
		"name": "BitChanger",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<<<<<}<<<<}<<<}<<<}\n}<}}<}}<}}<}}}<}}}}<}}<<<<<<<<<<<}\n}<}}<}}<}}<}}<}}<}}}<}}<}}<<<<<<<<<<<}\n<}\n}<}}<}}<}}<}}<}}<}}<}}<}}}<<<<<<<<<<<}\n}<}}<}}<}}}<}}<}}<}}<}}}<<<<<<<<<<<}\n}<}}<}}<}}<}}<}}<}}}<<<<<<<<<}\n}<}}<}}<}}}}}<}}}}<<<<<<<<<<<}\n}<}}<}}<}}<}}}}<<<<<<<<}\n}<}}<}}<}}<}}<}}}}}<}}<<<<<<<<<<<}\n}<}}<}}<}}<}}<}}}}}<<<<<<<<<<}\n}<}}<}}<}}<}}<}}<}}<<<<<<<<}\n}<}}<}}<}}}<}}<}}<}}}<}}<<<<<<<<<<<}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bitcycle": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/esolangs/tree/master/BitCycle",
		"name": "BitCycle",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-U"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "?!"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"72,101,108,108,111,44,32,87,111,114,108,100,33"
							]
						}
					}
				],
				"response": "72,101,108,108,111,44,32,87,111,114,108,100,33"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"bitwise": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/bitwise",
		"name": "Bitwise",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "MOV 1    &1 &1\nOUT &72  1\nOUT &101 1\nOUT &108 1\nOUT &108 1\nOUT &111 1\nOUT &44  1\nOUT &32  1\nOUT &87  1\nOUT &111 1\nOUT &114 1\nOUT &108 1\nOUT &100 1\nOUT &33  1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"blak": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/blak",
		"name": "Black (blak)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "> Hello, World!"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-e1"
							]
						}
					}
				],
				"response": "> Hello, World!"
			}
		},
		"update": "git"
	},
	"blc": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://tromp.github.io/cl/cl.html",
		"name": "Binary Lambda Calculus",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: 2a 48 65 6c 6c 6f 2c 20 57 6f 72 6c 64 21        *Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"boo": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://boo-lang.org/",
		"name": "Boo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"boolfuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/boolfuck",
		"name": "Boolfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ";;;+;+;;+;+;+;+;+;+;;+;;+;;;+;;+;+;;+;;;+;;+;+;;+;+;;;;+;+;;+;;;+;;+;+;+;;;;;;;+;+;;+;;;+;+;+;+;+;+;;;;+;+;;+;;+;+;;+;;;+;;;+;;+;+;;+;;;+;+;;+;;+;+;+;;;;+;+;;;+;+;+;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bosh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://schilytools.sourceforge.net/bosh.html",
		"name": "bosh",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "no-version"
	},
	"bot-engine": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/SuperJedi224/Bot-Engine",
		"name": "Bot Engine",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "vHello, World!\n>eeeeeeeeeeeeeP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brachylog": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/JCumin/Brachylog/releases",
		"name": "Brachylog v1",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"w"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"brachylog2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/JCumin/Brachylog",
		"name": "Brachylog",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"w"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bracmat": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/BartJongejan/Bracmat",
		"name": "Bracmat",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "put$\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"braille": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/braille",
		"name": "Braille",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "⠆⠄⡒⡆⡘⠀⠊⠦⢦⠗⢾⠽⠂⢢⢾⢦⢦⠮⢄"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brain-flak": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DJMcMayhem/Brain-Flak",
		"name": "Brain-Flak",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(((((((((((()()()()){}){}){}()))){}{}())[][][][])[][])[[]]())[[][][][][]]())([([]([])[][]{})]()()()([[]](([()()()]([([][][])](((({}()){}))){}{})))))"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainbash": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/Brainbash",
		"name": "Brainbash",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--->->->>+>+>>+[++++[>+++[>++++>-->+++<<<-]<-]<+++]>>>.>-->-.>..+>++++>+++.+>-->[>-.<<]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainbool": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "brainbool",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".+.+..+.+....+..+..+.+.+.+.+..+.+..+...+..+.+..+...+..+.+....+..+.+.+..+....+.+......+.+.+.+.+...+.+..+.+....+.+...+..+.+..+..+.+..+...+..+..+.+....+.+....+."
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-B"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"brainflump": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dylanrenwick/BrainFlump",
		"name": "BrainFlump",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++:..+++.-------------------------------------------------------------------.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++++++++++++.+++.;.--------.-------------------------------------------------------------------."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainfuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"braingolf": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dylanrenwick/braingolf",
		"name": "Braingolf",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"&@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainhack": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Flakheads/BrainHack",
		"name": "Brain-Flak (BrainHack)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(((((((((((()()()()){}){}){}()))){}{}())[][][][])[][])[[]]())[[][][][][]]())([([]([])[][]{})]()()()([[]](([()()()]([([][][])](((({}()){}))){}{})))))"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brainlove": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "Brainlove",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"brainspace": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://code.google.com/archive/p/brainspace/",
		"name": "BrainSpace",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "v ** Hello World Test -- If your BS1 interpreter is standard, it will output exactly \"Hello World!\" Because it uses every operators(except input).\n>++++++++++++++++++++++++++++++++++++++++++   V H\nV        }o  ++++++++++++++++++++++++++++++   <\n>+++++++++++++++++++++++++++++++++++++++++++++++++P++++++    V E\nV  }    < o ppppp ++++++++++++++++++++++++++++++++++++++++   <\n>+++++++++++++++++++++++++++++++++++++++++++++++++++++P++++++++++++++++++++++++++++++++++++++++++++++++++++++o}v L\nV++++++++++++++++++++++++++++++++++++m+++++++++++++++++++++                                                    <\n>++++++++++++++++++++++++++++++++++++++++++++++++++++o}\\ L\nV++++++++++++++++++++++++++++++++++++++++++++++++++++++<\n>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++o}V O\nV                                                           <\n>*%++++++++++++++++++++++++++++++++O}V\nV++++++++++++++++++++++++++++++++++  <\n>+++++++++++++++++++++++++++++++++++++++ppppppPpPp+++++*+++++++++++++++++++++++++++++++o}V W\nV++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++                          <\n>+++++++++++++++++++++++++++++++++++++++++++++++++0}V O\nV    -  P        P                  M               <\n>?++++++++++++++++++++++++++++++++++++++++++++++++++++++++      V R\nV}  o ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<\n>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++o}\\ L\nV                                                                                                              /\n>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*+-+++++++++++++++++++++oV D\nV                                                    LR                                           }lr    <\n>+++++++++++++++++++++++++++++++++oV !\nV           ?                  R   <\nx"
						}
					}
				],
				"response": "Hello world!"
			}
		},
		"update": "git"
	},
	"brat": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/presidentbeef/brat",
		"name": "Brat",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "p \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"brian-chuck": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/brian-chuck",
		"name": "Brian & Chuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "_#Jgnnq.\"Yqtnf#_{?\n#{<{>-?>--.>?"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"broccoli": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/broccoli-lang/broccoli",
		"name": "Broccoli",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(print \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bubblegum": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://esolangs.org/wiki/Bubblegum",
		"name": "Bubblegum",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0000000: 15 27 4d 50 62 a9 9a 29 6b 6d e2                 .'MPb..)km."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"burlesque": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/FMNSSun/Burlesque",
		"name": "Burlesque",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ",\"Hello, World!\"Q"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"buzzfizz": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/BuzzFizz",
		"name": "BuzzFizz",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\" "
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"bwfuckery": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Bitwise-Fuckery",
		"name": "Bitwise Fuckery",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++..+++.%++++++++++++++++++++++++++++++++++++++++++++.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.%.+++.------.--------.^%^&+.+"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"c-clang": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://clang.llvm.org/",
		"name": "C (clang)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"c-gcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://gcc.gnu.org/",
		"name": "C (gcc)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"c-tcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://savannah.nongnu.org/projects/tinycc",
		"name": "C (tcc)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n\treturn 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"caboose": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/CabooseLang/Caboose",
		"name": "Caboose",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cakeml": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://cakeml.org/",
		"name": "CakeML",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"calc2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://ciar.org/ttk/codecloset/calc/",
		"name": "calc (TTK)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"canvas": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/dzaima/Canvas",
		"name": "Canvas",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cardinal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://www.esolangs.org/wiki/Cardinal",
		"name": "Cardinal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "%\"Hello, World!\";x"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"carol-dave": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/bforte/carol-dave",
		"name": "Carol & Dave",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(((((((((((()<<><>>()<<><>>()<<><>>()<<><>>)<<><>>{}<<><>>)<<><>>{}<<><>>)<<><>>{}<<><>>()<<><>>)<<><>>)<<><>>)<<><>>{}<<><>>{}<<><>>()<<><>>)<<><>>[]<<><>>[]<<><>>[]<<><>>[]<<><>>)<<><>>[]<<><>>[]<<><>>)<<><>>[[]<<><>>]<<><>>()<<><>>)<<><>>[[]<<><>>[]<<><>>[]<<><>>[]<<><>>[]<<><>>]<<><>>()<<><>>)<<><>>([([]<<><>>([]<<><>>)<<><>>[]<<><>>[]<<><>>{}<<><>>)<<><>>]<<><>>()<<><>>()<<><>>()<<><>>([[]<<><>>]<<><>>(([()<<><>>()<<><>>()<<><>>]<<><>>([([]<<><>>[]<<><>>[]<<><>>)<<><>>]<<><>>(((({}<<><>>()<<><>>)<<><>>{}<<><>>)<<><>>)<<><>>)<<><>>{}<<><>>{}<<><>>)<<><>>)<<><>>)<<><>>)<<><>>)<<><>>"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-a"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"carrot": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/kritixilithos/Carrot",
		"name": "Carrot",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"cascade": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/GuyJoKing/Cascade",
		"name": "Cascade",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"\nH\ne\nl\nl\no\n,\n \nW\no\nr\nl\nd\n!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"catholicon": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/okx-code/Catholicon",
		"name": "Catholicon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-l"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cauliflower": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/broccoli-lang/broccoli",
		"name": "Cauliflower",
		"piggyback": "broccoli",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(print \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"ceres": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/ceres",
		"name": "Ceres",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "389960998265612367812323333 115dÆP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ceylon": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://ceylon-lang.org/",
		"name": "Ceylon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "shared void run() {\n\tprint(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "manual"
	},
	"chain": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/Chain",
		"name": "Chain",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"charm": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Aearnus/charm",
		"name": "Charm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\" Hello, World! \" pstring"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"chef": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://search.cpan.org/~smueller/Acme-Chef/",
		"name": "Chef",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello World.\n\nIngredients.\n 72 l H\n101 l e\n108 l l\n111 l o\n 44 l _comma\n 32 l _space\n 87 l w\n114 l r\n100 l d\n 33 l _bang\n\nMethod.\nPut _bang into the mixing bowl.\nPut d into the mixing bowl.\nPut l into the mixing bowl.\nPut r into the mixing bowl.\nPut o into the mixing bowl.\nPut w into the mixing bowl.\nPut _space into the mixing bowl.\nPut _comma into the mixing bowl.\nPut o into the mixing bowl.\nPut l into the mixing bowl.\nPut l into the mixing bowl.\nPut e into the mixing bowl.\nPut H into the mixing bowl.\nPour contents of the mixing bowl into the baking dish.\n\nServes 1."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "cpan"
	},
	"changeling": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/DennisMitchell/shapescript",
		"name": "Changeling",
		"piggyback": "shapescript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"IpQ:AQ..\n\"\"2(-znK]\n\"\" \"Tr4r[\n\"\")$dNcA.\n\"\" #!&...\n.........\n.........\n.........\n.........\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"chapel": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://chapel.cray.com/",
		"name": "Chapel",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "write(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"charcoal": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/somebody1234/Charcoal",
		"name": "Charcoal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"check": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ScratchMan544/check-lang",
		"name": "Check",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"checkedc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Microsoft/checkedc",
		"name": "Checked C",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio_checked.h>\n#include <stdchecked.h>\n\n#pragma CHECKED_SCOPE ON\n\nint main(int argc, nt_array_ptr<char> argv checked[] : count(argc)) {\n  puts(\"Hello, World!\");\n  return 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"cheddar": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cheddar.vihan.org/",
		"name": "Cheddar",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print (\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"chip": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Phlarx/chip",
		"name": "Chip",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "!ZZZZZZZZZZZZt\nxxxxxxxxxxxxxh\n)))))xx)))))xg\nx))))))x)))))f\nxxxxxxx)x)xxxe\n)x))))xx)x)xxd\nx)))))x))x))xc\nxxxx)xx)))xxxb\nx)xx)xx))xxx)a"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-w"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cil-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/tools+libraries/tools/monodis/",
		"name": "CIL (Mono IL assembler)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".assembly Program {}\n.assembly extern mscorlib {}\n\n.method static void Main()\n{\n     .entrypoint\n     .maxstack 1\n     ldstr \"Hello, World!\"\n     call void [mscorlib]System.Console::WriteLine(string)\n     ret\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cinnamon-gum": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/quartata/cinnamon-gum",
		"name": "Cinnamon Gum",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: 2201 1d92 93bd 33f1 a12f 2a4e 940b 32    \".....3../*N..2"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cixl": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/basic-gongfu/cixl",
		"name": "cixl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "use: cx;\n\n'Hello, World!' say"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cjam": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://sourceforge.net/p/cjam",
		"name": "CJam",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "hg"
	},
	"clam": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dylanrenwick/Clam",
		"name": "Clam",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "p+[[ua+ua,]\"!\"]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"clean": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Ourous/curated-clean-linux",
		"name": "Clean",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_CFLAGS": [
								"-b"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "module main\n\nStart:: String\nStart = \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"clips": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.clipsrules.net/",
		"name": "CLIPS",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(printout t \"Hello, World!\")\n(exit)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"clisp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.clisp.org/",
		"name": "Common Lisp",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(format t \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"clojure": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://clojure.org/",
		"name": "Clojure",
		"prettify": "clj",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(println \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"cobol-gnu": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://sourceforge.net/projects/open-cobol/",
		"name": "COBOL (GNU)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "PROGRAM-ID.H.PROCEDURE\nDIVISION.DISPLAY \"Hello, World!\".\n"
						}
					},
					{
						"command": "V",
						"payload": {
							"TIO_CFLAGS": [
								"-free"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "manual"
	},
	"cobra": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cobra-language.com/",
		"name": "Cobra",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "class Program\n\tdef main\n\t\tprint 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "version"
	},
	"coconut": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://coconut-lang.org/",
		"name": "Coconut",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" |> print"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "pip"
	},
	"coffeescript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://coffeescript.org/",
		"name": "CoffeeScript 1",
		"prettify": "coffee",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"coffeescript2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://coffeescript.org/",
		"name": "CoffeeScript 2",
		"prettify": "coffee",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"commata": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/totallyhuman/commata",
		"name": ",,,",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"commentator": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Commentator",
		"name": "Commentator",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"commercial": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/commercial",
		"name": "Commercial",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" - Satisfied Consumer of Hello\nHello has been selling out worldwide!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"condit": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/condit",
		"name": "Condit",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "when H=\"\"then set H=\"Hello, World!\"put H\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"convex": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/GamrCorps/Convex",
		"name": "Convex",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cood": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/jesobreira/cood/tree/php-interpreter",
		"name": "Cood",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "I want 72 of this.\nI'm very hungry.\nI want 101 of this.\nI'm very hungry.\nI want 108 of this.\nI'm very hungry.\nI'm very hungry.\nI want 111 of this.\nI'm very hungry.\nI want 44 of this.\nI'm very hungry.\nI want 32 of this.\nI'm very hungry.\nI want 87 of this.\nI'm very hungry.\nI want 111 of this.\nI'm very hungry.\nI want 114 of this.\nI'm very hungry.\nI want 108 of this.\nI'm very hungry.\nI want 100 of this.\nI'm very hungry.\nI want 33 of this.\nI'm very hungry."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"corea": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Corea",
		"name": "Corea",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cow": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bigzaphod.github.io/COW/",
		"name": "COW",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "MOo MOo MOo moO MOo moO MOo moO moO MoO moO MoO moO moO MoO MOO MoO MoO MoO MoO MOO moO MoO MoO MoO MOO moO MoO MoO MoO MoO moO MOo MOo moO MoO MoO MoO mOo mOo mOo MOo moo mOo MOo moo mOo MoO MoO MoO moo moO moO moO Moo moO MOo MOo moO MOo Moo moO Moo Moo MoO moO MoO MoO MoO MoO moO MoO MoO MoO Moo MoO moO MOo MOo moO MOO moO MOo Moo mOo mOo moo"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cpp-clang": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://clang.llvm.org/",
		"name": "C++ (clang)",
		"prettify": "cpp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <iostream>\nint main() {\n\tstd::cout << \"Hello, World!\" << std::endl;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cpp-gcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://gcc.gnu.org/",
		"name": "C++ (gcc)",
		"prettify": "cpp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <iostream>\nint main() {\n\tstd::cout << \"Hello, World!\" << std::endl;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cpy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/vrsperanza/CPY",
		"name": "CPY",
		"prettify": "cpp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <iostream>\nmain()\n  ! \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"cquents": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stestoltz/cQuents",
		"name": "cQuents",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!?0"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"crayon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ETHproductions/crayon",
		"name": "Crayon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"q"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cryptol": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.cryptol.net/",
		"name": "Cryptol",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ":set ascii=on\n\"Hello, World!\""
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"update": "git"
	},
	"crystal": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://crystal-lang.org",
		"name": "Crystal",
		"prettify": "ruby",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cs-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.microsoft.com/net/core/platform",
		"name": "C# (.NET Core)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using System;\nclass Program {\n\tstatic void Main(string[] args) {\n\t\tConsole.WriteLine(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cs-csc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/releases/5.0.0/#csc",
		"name": "C# (Visual C# Compiler)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using System;\nclass Program {\n\tstatic void Main(string[] args) {\n\t\tConsole.WriteLine(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cs-csi": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/releases/5.0.0/#csc",
		"name": "C# (Visual C# Interactive Compiler)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "WriteLine(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"cs-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/languages/csharp/",
		"name": "C# (Mono C# compiler)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using System;\nclass Program {\n\tstatic void Main(string[] args) {\n\t\tConsole.WriteLine(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"cs-mono-shell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/tools+libraries/tools/repl/",
		"name": "C# (Mono C# Shell)",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Console.WriteLine(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"csl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/jammy-dodgers/CSL",
		"name": "CSL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "p&1*+1*+++1+++1p_~+++++++1pD_~+++++1pD&++1pD&*+++1+++++1pD&*++1++++1pp&&D+++++1D*+1*D+++1|p&++1pDpD&++++++1pD&+++1&*++++1++++1DDpD*+1*D+++++1E!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cubically": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/cubically",
		"name": "Cubically",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+53@6+1F2L2+0@6L2F2U3R3F1L1+2@66L3F3R1U1B3+0@6:4U1R1+00@6-000@6+50000@6+000000@6+2-000000@6-5+4000@6-00@6/0+00@6:0+0/0+00@6"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cubix": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ETHproductions/cubix",
		"name": "Cubix",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "./v.o;@?/\"!dlroW\"S',u/\"Hello\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"curlyfrick": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/JonoCode9374/CFEsolang",
		"name": "Curlyfrick",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "{}{}.{}\t(({}+{}+{}+{})^({}+{}+{}))+(({}+{})^({}+{}+{}))\n{}{}.{}\t(((({}+{})^({}+{}+{}))+{}+{})^({}+{}))+{}\n{}{}.{}\t(((({}+{})^({}+{}+{}))+{}+{})^({}+{}))+(({}+{})^({}+{}+{}))\n{}{}.{}\t(((({}+{})^({}+{}+{}))+{}+{})^({}+{}))+(({}+{})^({}+{}+{}))\n{}{}.{}\t(((({}+{})^({}+{}+{}))+{}+{})^({}+{}))+(({}+{})^({}+{}+{}))+{}+{}+{}\n{}{}.{}\t(((({}+{})*({}+{}))^({}+{}))*({}+{}+{}))-({}+{}+{}+{})\n{}{}.{}\t(({}+{})^({}+{}+{}))*({}+{}+{}+{})\n{}{}.{}\t({}+{}+{})*((({}+{}+{}+{}+{})^({}+{}))+{}+{}+{}+{})\n{}{}.{}\t(((({}+{})^({}+{}+{}))*({}+{}+{}+{}))+{}+{}+{}+{}+{})*({}+{}+{})\n{}{}.{}\t((((({}+{})^({}+{}+{}))*({}+{}+{}+{}))+{}+{}+{}+{}+{})*({}+{}+{}))+{}+{}+{}\n{}{}.{}\t(((({}+{})^({}+{}+{}))+{}+{})^({}+{}))+(({}+{})^({}+{}+{}))\n{}{}.{}\t((({}+{})^({}+{}+{}))+{}+{})^({}+{})\n{}{}.{}\t((({}+{})^({}+{}+{}))*({}+{}+{}+{})) + {}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"curry-pakcs": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.informatik.uni-kiel.de/~pakcs/",
		"name": "Curry (PAKCS)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main = putStr \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"curry-sloth": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://babel.ls.fi.upm.es/research/Sloth/",
		"name": "Curry (Sloth)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "import IO\n\nmain = putStr \"Hello, World!\"\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"cy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cyoce/Cy",
		"name": "Cy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" :<"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"cyclone": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cyclone.thelanguage.org/",
		"name": "Cyclone",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n\treturn 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"d": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://dlang.org/",
		"name": "D",
		"prettify": "d",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "import std.stdio; void main(){writeln(\"Hello, World!\");}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"d2": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Attache/blob/master/D2.md",
		"name": "D2",
		"pigyback": "attache",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"r8$.s$o;Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"dafny": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Microsoft/dafny",
		"name": "Dafny",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "method Main() {\n\tprint \"Hello, World!\";\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"dart": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.dartlang.org/",
		"name": "Dart",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main() {\n  print('Hello, World!');\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"dash": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://wiki.debian.org/Shell",
		"name": "Dash",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"dc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/bc/manual/dc-1.05/html_mono/dc.html",
		"name": "dc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "[Hello, World!]P"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"deadfish-": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/deadfish-",
		"name": "Deadfish~",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "w"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"decimal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aaronryank/Decimal",
		"name": "Decimal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "13072101108108111044032087111114108100033D 301"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"#"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"delimit": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/MistahFiggins/Delimit",
		"name": "Del|m|t",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "=#:#Hello, World!#/##3#=#?#9#\""
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"#"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"deorst": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Deorst",
		"name": "Deorst",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'O"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dirty": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Ourous/dirty",
		"name": "Dirty",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'‼"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"detour": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cyoce/detour",
		"name": "Detour",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`u\n@\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dg": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://pyos.github.io/dg/",
		"name": "dg",
		"prettify": "haskell",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "pip"
	},
	"dobela": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://deewiant.iki.fi/projects/dobelx64/",
		"name": "DOBELA",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ",,.,,,,.,..,,.,,,..,..,,,...,,.,,..,....,.,.,...,,.,,,,,,,.,..,,,..,....,..,..,,,..,..,,,..,,.,.,.,,.,,,$^\n.                                                                                                         #"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dobela-dobcon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stasoid/DOBELA",
		"name": "DOBELA (dobcon)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ",,.,,,,.,..,,.,,,..,..,,,...,,.,,..,....,.,.,...,,.,,,,,,,.,..,,,..,....,..,..,,,..,..,,,..,,.,.,.,,.,,,$^\n.                                                                                                         #"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dodos": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/DennisMitchell/dodos",
		"name": "Dodos",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-B"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "\t2 4 2\n\t1 5 3\n\t3 1 4\n\t3 1 4\n\t1 2 4\n\t4 3 1\n\t2 1 1\n\t2 2 3\n\t1 2 4\n\t4 2 4\n\t3 1 4\n\t5 4 3\n\t3 1 1\nb\n\t\n\t\n\t\n\t\n\t\ni\n\tdot j\nj\n\t\n\tdip dot dab\n1\n\ti dot b\n2\n\ti 1\n3\n\ti 2\n4\n\ti 3\n5\n\ti 4"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"dreaderef": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ScratchMan544/Dreaderef",
		"name": "Dreaderef",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "chro \"H\"\nchro \"e\"\nchro \"l\"\nchro \"l\"\nchro \"o\"\nchro \",\"\nchro \" \"\nchro \"W\"\nchro \"o\"\nchro \"r\"\nchro \"l\"\nchro \"d\"\nchro \"!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"drive-in-window": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/drive-in-window",
		"name": "Drive-In Window",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hi, welcome to X. Here is a menu.\nC:$30\nG:$70\nJ:$100\nHere are your sides.\na:$1\nb:$2\nc:$3\nh:$8\nk:$11\nn:$14\nq:$17\nMay I take your order?\nPerson 1 would like the G with b.\nPerson 1 will pay for his order!\nPerson 1 would like the J with a.\nPerson 1 will pay for his order!\nPerson 2 would like the J with h.\nPerson 2 will pay for his order!\nPerson 2 will pay for his order!\nPerson 3 would like the J with k.\nPerson 3 will pay for his order!\nPerson 1 would like the C with n.\nPerson 1 will pay for his order!\nPerson 1 would like the C with b.\nPerson 1 will pay for his order!\nPerson 1 would like the G with q.\nPerson 1 will pay for his order!\nPerson 3 will pay for his order!\nPerson 1 would like the J with n.\nPerson 1 will pay for his order!\nPerson 2 will pay for his order!\nPerson 1 would like the J.\nPerson 1 will pay for his order!\nPerson 1 would like the C with c.\nPerson 1 will pay for his order!\nOK, that will be . Thanks for coming!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dscript": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/DScript",
		"name": "DScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\".writeln"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"dstack": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alejandrocoria/DStack",
		"name": "DStack",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@0\nHello, World!\n@\nad"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"eacal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/eacal",
		"name": "eacal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "put string Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ec": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://ecere.org/",
		"name": "eC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "class HelloApp : Application\n{\n   void Main()\n   {\n      PrintLn(\"Hello, World!\");\n   }\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ecndpcaalrlp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/ecndpcaalrlp",
		"name": "!@#$%^&*()_+",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": " ^dlroW ,olleH(@)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ecpp-c": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/ecpp",
		"name": "ecpp + C (gcc)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\n\n#def `f x` f(x)\n\nint main() {\n\tputs \"Hello, World!\";\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"ecpp-cpp": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/ecpp",
		"name": "ecpp + C++ (gcc)",
		"piggyback": "ecpp-c",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <cstdio>\n\n#def `f x` f(x)\n\nint main() {\n\tputs \"Hello, World!\";\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "piggyback"
	},
	"dyvil": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dyvil/dyvil",
		"name": "Dyvil",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "class Main\n{\n\tstatic func main(args: [String]) = print 'Hello, World!'\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "git"
	},
	"ed": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/ed/",
		"name": "ed",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "a\nHello, World!\n.\nwq\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"egel": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/egel-lang/egel",
		"name": "Egel",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "import \"io.ego\"\n\nusing IO\n\ndef main = print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"element": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/PhiNotPi/Element",
		"name": "Element",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello\\,\\ World\\!`"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"elf": {
		"categories": [
			"practical"
		],
		"encoding": "xxd",
		"link": "https://refspecs.linuxfoundation.org/elf/elf.pdf",
		"name": "ELF (x86/x64, Linux)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0000000: 7f 45 4c 46 01 00 00 00 00 00 00 00 00 90 43 0d  .ELF..........C.\n0000010: 02 00 03 00 19 90 43 0d 19 90 43 0d 04 00 00 00  ......C...C.....\n0000020: b9 2e 90 43 0d b2 0d cd 80 cc 20 00 01 00 48 65  ...C...... ...He\n0000030: 6c 6c 6f 2c 20 57 6f 72 6c 64 21                 llo, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"elixir": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://elixir-lang.org/",
		"name": "Elixir",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "IO.puts \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"elvm-ir": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/shinh/elvm",
		"name": "ELVM-IR",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "putc 72\nputc 101\nputc 108\nputc 108\nputc 111\nputc 44\nputc 32\nputc 87\nputc 111\nputc 114\nputc 108\nputc 100\nputc 33\nexit"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emacs-lisp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/emacs/manual/eintr.html",
		"name": "Emacs Lisp",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(princ \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"emmental": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Emmental",
		"name": "Emmental",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ";#58#126#63#36!;#46#36#!;#0#1!;#0#2!;#0#3!;#0#4!;#0#5!;#0#6!;#0#7!#0#33#100#108#114#111#87#32#44#111#108#108#101#72$"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emoji": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Emoji",
		"name": "Emoji",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "💬Hello, World!💬➡"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emoji-gramming": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/Emoji-gramming",
		"name": "Emoji-gramming",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "😊🕐💖\n😇🕐🕐\n😊🕑🕐\n😇🕑🕑\n😊🕒🕑\n😇🕒🕒\n😊♈💖\n😇♈🕒\n😊📢♈\n😊♈💜\n😇♈💞\n😇♈🕑\n😇♈🕒\n😊📢♈\n😊♉💞\n😇♉💖\n😇♉🕑\n😇♉🕒\n😊📢♉\n😊📢♉\n😊♊💜\n😇♊💕\n😇♊💞\n😇♊💖\n😇♊🕑\n😇♊🕒\n😊📢♊\n😊♈💞\n😇♈💖\n😇♈🕑\n😊📢♈\n😊📢🕑\n😊♈💜\n😇♈💕\n😇♈💞\n😇♈🕐\n😇♈🕒\n😊📢♈\n😊📢♊\n😊♈💕\n😇♈🕐\n😇♈🕑\n😇♈🕒\n😊📢♈\n😊📢♉\n😊♈💞\n😇♈🕑\n😇♈🕒\n😊📢♈\n😊♈💜\n😇♈🕑\n😊📢♈\n😊♈💖\n😇♈💕\n😊📢♈"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emojicode": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://www.emojicode.org/",
		"name": "Emojicode 0.5",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "🏁 🍇\n\t😀 🔤Hello, World!🔤\n🍉"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emojicode6": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://www.emojicode.org/",
		"name": "Emojicode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "🏁 🍇\n\t😀 🔤Hello, World!🔤❗️\n🍉"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"emojicoder": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/EmojiCoder",
		"name": "EmojiCoder",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "👋🔡🌚🌝🌚🌚🌝🌚🌚🌚\n👋🔡🌚🌝🌝🌚🌚🌝🌚🌝\n👋🔡🌚🌝🌝🌚🌝🌝🌚🌚\n👋🔡🌚🌝🌝🌚🌝🌝🌚🌚\n👋🔡🌚🌝🌝🌚🌝🌝🌝🌝\n👋🔡🌚🌚🌝🌚🌝🌝🌚🌚\n👋🔡🌚🌚🌝🌚🌚🌚🌚🌚\n👋🔡🌚🌝🌝🌝🌚🌝🌝🌝\n👋🔡🌚🌝🌝🌚🌝🌝🌝🌝\n👋🔡🌚🌝🌝🌝🌚🌚🌝🌚\n👋🔡🌚🌝🌝🌚🌝🌝🌚🌚\n👋🔡🌚🌝🌝🌚🌚🌝🌚🌚\n👋🔡🌚🌚🌝🌚🌚🌚🌚🌝"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"emotifuck": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Romulus10/emotif___",
		"name": "emotifuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "😂😂😂😂😂😂😂😂🌚🔥😂😂😂😂🌚🔥😂😂🔥😂😂😂🔥😂😂😂🔥😂💯💯💯💯💩🐸🔥😂🔥😂🔥💩🔥🔥😂🌚💯🐸💯💩🐸🔥🔥💞🔥💩💩💩💞😂😂😂😂😂😂😂💞💞😂😂😂💞🔥🔥💞💯💩💞💯💞😂😂😂💞💩💩💩💩💩💩💞💩💩💩💩💩💩💩💩💞🔥🔥😂💞🔥😂😂💞"
						}
					}
				],
				"response": "Hello World!"
			}
		},
		"update": "git"
	},
	"emotinomicon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Emotinomicon",
		"name": "Emotinomicon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "😭!dlroW ,olleH😲⏪⏬⏩"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"empty-nest": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/(())",
		"name": "(())",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Let A = (()())\nLet H = (()(())())\nLet e = ((()))\nLet l = ()\nLet o = (())\nLet , = (()()())\nLet   = ((())())\nLet W = (()(()))\nLet r = (((())))\nLet d = (()()()())\nLet ! = ((())()())\n((((()()))((()(())())((()))()()(())(()()())((())())(()(()))(())(((())))()(()()()())((())()()))))(()((()())))"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"enlist": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/enlist",
		"name": "Enlist",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!”"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"erlang-escript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://erlang.org/doc/man/escript.html",
		"name": "Erlang (escript)",
		"prettify": "erlang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\nmain([])->\nio:fwrite(\"Hello, World!\")."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"es": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/wryun/es-shell",
		"name": "es",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"esopunk": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://gitlab.com/Blacksilver/pyesopunk",
		"name": "ESOPUNK",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "COPY  72 #STDO\nCOPY 101 #STDO\nCOPY 108 #STDO\nCOPY 108 #STDO\nCOPY 111 #STDO\nCOPY  44 #STDO\nCOPY  32 #STDO\nCOPY  87 #STDO\nCOPY 111 #STDO\nCOPY 114 #STDO\nCOPY 108 #STDO\nCOPY 100 #STDO\nCOPY  33 #STDO"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"eta": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.miketaylor.org.uk/tech/eta/doc/",
		"name": "ETA",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "NINENAHAENATOENAAAENATSENTNOENIIENSAENATSENATOENATOENAHOENTOAEOOOOOOOOOOOOO"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"euphoria3": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://rapideuphoria.com/index.html",
		"name": "Euphoria 3",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts(1, \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"euphoria4": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://openeuphoria.org",
		"name": "Euphoria 4",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts(1, \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"evil": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://web.archive.org/web/20070103000858/www1.pacific.edu/~twrensch/evil/index.html",
		"name": "evil",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "aeeeaeeewueuueweeueeuewwaaaweaaewaeaawueweeeaeeewaaawueeueweeaweeeueuw"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"explode": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/stestoltz/Explode",
		"name": "Explode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@1_0+E\n@1_0+17\n@1_0+1e\n@1_0+1e\n@1_0+1h\n@1_0+c\n\n@1_0+T\n@1_0+1h\n@1_0+1k\n@1_0+1e\n@1_0+16\n@1_0+1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"extended-brainfuck-type-i": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "Extended Brainfuck Type I",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"extrac": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/extrac",
		"name": "ExtraC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "printf(quote(Hello)CHAR CHAR quote(World)CHAR,44,32,33)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"face": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/KeyboardFire/face",
		"name": "face",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!\n)\\$*m%*7%+%%%,c'$,ioow%$%o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"factor": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://factorcode.org/",
		"name": "Factor",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "USE: io \"Hello, World!\" print"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"false": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/somebody1234/FALSE",
		"name": "FALSE",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fantom": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://fantom.org/",
		"name": "Fantom",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "class HelloWorld\n{\n  static Void main()\n  {\n    echo(\"Hello, World!\")\n  }\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"farnsworth": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://metacpan.org/pod/Language::Farnsworth",
		"name": "Farnsworth",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"update": "cpan"
	},
	"felix": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/felix-lang/felix",
		"name": "Felix",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print$ \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"fernando": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/FerNANDo",
		"name": "FerNANDo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "7 7\n3\n5 5\n6 5\n4 3 3\n0 5 3 0 7 3 0 0\n0 5 7 0 0 5 0 4\n0 6 5 2 4 6 2 3\n0 6 6 0 7 7 2 3\n0 6 6 2 5 4 7 4\n2 2\n3 5\n3"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"feu": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/feu",
		"name": "FEU",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "a/Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fimpp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/avian2/fimpp",
		"name": "FIM++",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Dear Princess Celestia: An example letter.\n\nToday I learned about greetings:\n\nI said \"Hello, World!\".\n\nYour faithful student, Twilight Sparkle."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fish": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Fish",
		"name": "><>",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "!v\"Hello, World!\"r!\n >l?!;o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fish-shell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://fishshell.com/",
		"name": "fish",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"fission": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/C0deH4cker/Fission",
		"name": "Fission",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "R\"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"fission2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/C0deH4cker/Fission",
		"name": "Fission 2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "R\"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"flipbit": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/cairdcoinheringaahing/Flipbit",
		"name": "Flipbit",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ">^>>>^>>>.^<<^<^<<^>>>>>.^<<<^>>>..^<^>.^<^<<<<<^>>>>>>.<<^<^>>>.^<^<^<<^<^<^>>>>>>.<<<^<^<^>>>>>.^<<^<^<^>>>>.<^<^<^<^>>>>.<<<^>>>.^<<^<<<<^>>>>>>."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"floater": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/Zom-B/Floater",
		"name": "Floater",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52  .PNG........IHDR\n00000010: 00 00 00 34 00 00 00 1a 08 06 00 00 00 f8 de 7f  ...4............\n00000020: ad 00 00 00 01 73 52 47 42 00 ae ce 1c e9 00 00  .....sRGB.......\n00000030: 00 04 67 41 4d 41 00 00 b1 8f 0b fc 61 05 00 00  ..gAMA......a...\n00000040: 00 09 70 48 59 73 00 00 0e c4 00 00 0e c4 01 95  ..pHYs..........\n00000050: 2b 0e 1b 00 00 00 a8 49 44 41 54 58 47 ed 94 51  +......IDATXG..Q\n00000060: 0a 80 20 10 44 b7 0e d9 21 bd 64 25 26 86 58 99  .. .D...!.d%&.X.\n00000070: ce b6 2b ed 83 c8 8f 90 79 4e ee 44 e4 56 12 67  ..+.....yN.D.V.g\n00000080: d9 1f 17 96 9d cc c7 5b 18 8c 8c 47 89 50 2f be  .......[...G.P/.\n00000090: e1 c0 c0 42 49 e2 cc 40 42 65 81 1c a5 42 75 e1  ...BI..@Be...Bu.\n000000a0: 4b 28 10 6a 0f 5f 42 81 90 9f 70 38 29 01 a1 9a  K(.j._B...p8)...\n000000b0: f0 6f 25 d3 f7 1f 0a c5 80 d8 46 72 18 84 38 1a  .o%.......Fr..8.\n000000c0: a8 a7 51 08 11 86 47 ea 46 88 ef b7 e0 64 76 fe  ..Q...G.F....dv.\n000000d0: a0 c4 88 2d e1 42 08 4c 39 5e 4c 08 0f 76 38 58  ...-.B.L9^L..v8X\n000000e0: 43 da 31 21 ed 34 0a b5 5c 64 ec e5 bf da cf 1a  C.1!.4..\\d......\n000000f0: 7a 06 dd 44 a4 6e df 3f 35 c4 75 d2 9c 10 6d b4  z..D.n.?5.u...m.\n00000100: 64 16 e1 14 39 d3 52 00 00 00 00 49 45 4e 44 ae  d...9.R....IEND.\n00000110: 42 60 82                                         B`.\n"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"flobnar": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Reconcyl/flobnar",
		"name": "Flobnar",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!\n:\ng<\n0+<   6\n\\< 0 0v\n :,` |<\\@6\n>-^:#<6\n 1    +<"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-r"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"foam": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Reconcyl/foam-lang",
		"name": "Foam",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<'|Hello, World!|"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"focal": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.cozx.com/dpitts/",
		"name": "FOCAL-69",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "10.10 t \"Hello, World!\"\ng"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"foo": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Foo",
		"name": "Foo",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"forget": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/BenjaminUrquhart/Forget",
		"name": "Forget",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "push 72;cleanse;pop;out;push 101;cleanse;pop;out;push 108;cleanse;pop;out;push 108;cleanse;pop;out;push 111;cleanse;pop;out;push 44;cleanse;pop;out;push 32;cleanse;pop;out;push 87;cleanse;pop;out;push 111;cleanse;pop;out;push 114;cleanse;pop;out;push 108;cleanse;pop;out;push 100;cleanse;pop;out;push 33;cleanse;pop;out"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"forked": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/Forked",
		"name": "Forked",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "89*@AA*i@7+@@3+@P4B*@C'!F+!U@3+@6'@8'@3B*!&"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"forte": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/judofyr/forter",
		"name": "Forte",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "102 PRINT \"Hello, World!\":END"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"forth-gforth": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/",
		"name": "Forth (gforth)",
		"prettify": "forth",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".( Hello, World!)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"fortran-gfortran": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://gcc.gnu.org/fortran/",
		"name": "Fortran (GFortran)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print'(\"Hello, World!\")'\nend"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"fourier": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/beta-decay/Fourier",
		"name": "Fourier",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`Hello, World!`"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fractran": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/DennisMitchell/ffi",
		"name": "FRACTRAN",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-r"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "(3^72*5^101*7^108*11^108*13^111*17^44*19^32*23^87*29^111*31^114*37^108*41^100*43^33)/2"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"fs-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.microsoft.com/net/core/platform",
		"name": "F# (.NET Core)",
		"prettify": "fs",
		"tab": "    ",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "printfn \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"fs-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/",
		"name": "F# (Mono)",
		"prettify": "fs",
		"tab": "    ",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "printfn \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"fueue": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/fueue",
		"name": "Fueue",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72 101 108 108 111 44 32 87 111 114 108 100 33H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"funciton": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Timwi/Funciton",
		"name": "Funciton",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "╔═══════════════╗\n║ 2388215291394 ║\n║ 5970717094395 ║\n║ 9830070909071 ║\n║ 3359207734160 ║\n║ 6896177782105 ║\n║ 7169552834632 ║\n╚═══════╤═══════╝\n        │"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"functoid": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/bforte/Functoid",
		"name": "Functoid",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"H\",\"e\",\"l\",\"l\",\"o\",\",\",\" \",\"W\",\"o\",\"r\",\"l\",\"d\",\"!\",@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"funky": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/Funky",
		"name": "Funky",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"funky2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/Funky2",
		"name": "Funky 2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"fynyl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Fynyl",
		"name": "Fynyl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"gaia": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/splcurran/Gaia",
		"name": "Gaia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!”"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"gaotpp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/gaotpp",
		"name": "Gaot++",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeeeeet bleet bleeeeeeeeeeeeet bleeeeeeeeeeeeet bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleet bleeeeeeeeeeeeet bleeeeeeeeeet\nbaaaaaaaa bleet bleeeeeeeeeeeeet bleeeeeeeeeet\nbleeeeeeeeeeeeet bleeeeeeeeeet\nbleeeeeeeeeeeeet baaaa bleet bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeeeeet baaaaaaaaaaaaa bleet bleeeeeeeeeet\nbleeeeeeeeeet\nbleeeeeeeeeeeeeeet baaaaaaaaaaaaaaaa bleet bleeeeeeeeeeeeet bleeeeeeeeeet bleeeeeeeeeeeeeeet\nbleeeeeeeeeeeeet baaaa bleet bleeeeeeeeeeeeet bleeeeeeeeeet\nbaaaa bleet bleeeeeeeeeet\nbleeeeeeeeeet\nbaaaaaaaaaaaaaa bleet bleeeeeeeeeet\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa bleeeeeeeeeet"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"gap": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gap-system.org/",
		"name": "GAP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"gema": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://gema.sourceforge.net/",
		"name": "Gema",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\B=Hello, World\\!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"geo": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Orst-Geo",
		"name": "Geo",
		"piggyback": "orst",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "3733\n O                  \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n      O             \n                    \n                   O\n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n            O       \n       O            \n                    \n                    \n                    \n                    \n          O         \n                    \n                    \n                    \n          O         \n                    \n     O"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "piggyback"
	},
	"glypho": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://web.archive.org/web/20060621185740/http://www4.ncsu.edu/~bcthomp2/glypho.txt",
		"name": "Glypho",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "aabcabababbaababaabcabbaabababbcabbaabababababababbaabbaabababababababbaabbaaabcabbaababaabcaabcabbaabababbcabababbaabbaababaabcaabcabbaaabcabbaabababbaabbaababaabcabcaabababababbaabbaabbaababaabcabaaababaabaabbaabcaabababbaabbaaabcaabcabbaabababbcabababbcabababbaabaaababaabaabababbaabababbaabababaaababaabaabbaabababbaaabcabbaababaabcabcaabababababbaabbaabbaababaabcabcaabaaababaabaabbaabababbcaabcabbaaabcaabcabbaaabcabbaabababbaabababbcabababbaabaaabababcaabbaaabaabacabbbabcb"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"glypho-shorthand": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://web.archive.org/web/20060621185740/http://www4.ncsu.edu/~bcthomp2/glypho.txt",
		"name": "Glypho (shorthand)",
		"piggyback": "glypho",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "1d+d1+d*+ddd++ddd++1+d11+d*d++d11+1+d++d1-dd+++d1<d>+-d++11+d*d*d+<d>d+d+d<d>+d+1+d1-dd+++d1-<d>+d*1+11+1+d+d*d+<d-+>[o]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"gnuplot": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.gnuplot.info/",
		"name": "gnuplot",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "set print '-'\nprint 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"go": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://golang.org/",
		"name": "Go",
		"prettify": "go",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "package main\nimport \"fmt\"\nfunc main() {\n\tfmt.Println(\"Hello, World!\")\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"golfish": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Sp3000/Golfish",
		"name": "Gol><>",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"golfscript": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.golfscript.com/golfscript/",
		"name": "GolfScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"granule": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/granule-project/granule",
		"name": "Granule",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main : String\nmain = \"Hello, World!\""
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"--no-info"
							]
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"update": "git"
	},
	"grass": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/grass",
		"name": "Grass",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "wv\nwwWWwWWWwv\nWwwww\nWWw\nWWWw\nWWWWw\nWWWWWw\nWWWWWWw\nWWWWWWWw\nWwwwwwwwwwwww\nWWWWw\nWWWWWWWw\nWWWWWWWWWWWWWWw\nWWWWWWWWWWWww\nWWWWWWWWWWww\nWWWWWWWWWWWWw\nWWWWWWWWWWww\nWWWWWWWWWWwwwwwww\nWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWWWWww\nWWWWWWWWWWWWWWWWWWww\nWWWWWWWWWWWWWWWWWWwwwww\nWWWWWWWWWWWWWWWWWWWWWww\nWWWWWWWWWWWWWWWWWWWWWWWw\nWWWWWWWWWWWWWWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwwww\nWwwwwwwwwwww\nWWwwwwwww\nWWWwwwwwww\nWWWWw\nWWWWWwwwwwwww\nWWWWWWwwwwwwwwwwwwwwwww\nWWWWWWWwwwwwwwwwwwwwwwwwwwww\nWWWWWWWWwwwwwwwwwwwwwwwww\nWWWWWWWWWwwww\nWWWWWWWWWWwwwwwwwwwww\nWWWWWWWWWWWwwwwwww\nWWWWWWWWWWWWwwwwwwwwwwwwwwwwww\nWWWWWWWWWWWWWwwwwwwwwwwwwwwwwwwwwwwwwww"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"grime": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/iatorm/grime",
		"name": "Grime",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".+"
						}
					},
					{
						"command": "F",
						"payload": {
							".input.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"groovy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://groovy-lang.org/",
		"name": "Groovy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"gs2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/nooodl/gs2",
		"name": "GS2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "↕h"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"gwion": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fennecdjay/gwion",
		"name": "Gwion",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<<<\"Hello, World!\", \"\">>>;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"hades": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Azer0s/HadesLang",
		"name": "HadesLang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "out:'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"haskell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.haskell.org/",
		"name": "Haskell",
		"prettify": "hs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main = putStr \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"haskell-gofer": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/stasoid/Gofer",
		"name": "Haskell 1.2 (Gofer)",
		"prettify": "hs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main = appendChan stdout \"Hello, World!\" exit done"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"haskell-hugs": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.haskell.org/hugs",
		"name": "Haskell 98 (Hugs)",
		"prettify": "hs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main = putStr \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"haskell-literate": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.haskell.org/onlinereport/literate.html",
		"name": "Literate Haskell",
		"prettify": "hs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "> main = putStr \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"hasm": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/pavelbraginskiy/hASM",
		"name": "hASM",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<14\nMALLOC\nCPY\nSAV\nSAV\n<0\n<'!'\n<'d'\n<'l'\n<'r'\n<'o'\n<'W'\n<' '\n<','\n<'o'\n<'l'\n<'l'\n<'e'\n<'H'\nLOD\nSTRLOAD\nLOD\nPRINTZ"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"haxe": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://haxe.org",
		"name": "Haxe",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "class Main {\n  static public function main():Void {\n    Sys.print(\"Hello, World!\");\n  }\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"haystack": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/kade-robertson/haystack",
		"name": "Haystack",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"o|"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"hbcht": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://git.metanohi.name/hbcht.git/",
		"name": "Half-Broken Car in Heavy Traffic",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@outtext\n     v                           >v      ^\n> v  <                            v    >>^<\n  v  ^  v                         v    ^\n     ^  <                         v    ^\n        ^                         v    ^\n  >   />^<v                       v    ^\n  ^  >v<  <                       v    ^\n          ^                       v    ^\n  ^   > />^<v                     v    ^   #\n  ^   ^>v<  <                     v    ^   ^\n  ^         ^                     v    ^   ^\n  ^     > />^<v                   v    ^   ^\n  ^     ^>v<  <                   v    ^   ^\n  ^           ^                   v    ^   ^\n  ^       > />^<v                 v    ^   ^\n  ^       ^>v<  <                 v    ^   ^\n  ^             ^                 v    ^   ^\n  ^         > />^<v               v    ^   ^\n  ^         ^>v<  <           >v  v    ^ >>^<\n  ^               ^           ^v  v    ^ ^\n  ^           > />^<v         ^v  v    ^ ^\n  ^           ^>v<  <         ^v  v  >>^<^\n  ^                 ^         ^v  v  ^   ^\n  ^             > />^<v       ^v  v  ^   ^\n  ^             ^>v<  <       ^v  v  ^   ^\n  ^                   ^       ^v  v  ^   ^\n  ^               > />^<v     ^v  v  ^   ^\n  ^               ^>v<  <     ^v  v  ^   ^\n  ^                     ^     ^v  v  ^   ^\n  ^                 > />^<v   ^v  v  ^   ^\n  ^                 ^>v<  <   ^v  v  ^   ^\n  ^                       ^   ^v  v  ^   ^\n  ^                   > />^<v ^v  v  ^   ^\n  ^                   ^>v<  < ^v  v  ^   ^\n  ^                         ^ ^v  v  ^   ^\n  ^                     > />^<^v  v  ^   ^\n  ^                >>   ^     ^ < v  ^   ^\n  ^          >v<<<<<<<<<<<<    v  v  ^   ^\n  ^           v   >^<          v  v>>^<  ^\n  ^           v  > >v          v  v^     ^\n> ^   v       v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v      ^\n^ ^           v  ^^            v  v    >>^<\n^ ^           v  ^^ <          v  v    ^\n^ ^           v>>^<            v  v    ^\n^ ^                            v  v    ^\n^ ^           v^               v  v    ^\n^ ^           v^               v  v    ^\n^ ^           v^               v  v      v\n^ ^           v^               v  v >v   <\n^ ^           v^               v  v  >>^<^\n^ ^        >v <^               v  v  ^   ^\n^ ^         >>^^<              v  v      ^\n^ ^         ^                  v  v      ^\n^ ^                            v  >v     ^\n^ ^                            v  ^v     ^\n^ ^                            v   v     ^\n^ ^                            v   v     ^\n^ ^    v                       v   v     ^\n^ ^    <                       v   v     ^\n^     >^<                      v   v     ^\n^     ^                        v   v     ^\n^     v                        > ^<      ^\n^     <                        ^\n    >>^<\n >  ^<v\n ^ >v<<\n  v\n>v<\n  ^\n >^<\n o>v\n v >  ^<\n v ^"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "pip"
	},
	"hdbf": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Property404/hdbf",
		"name": "Hyper-Dimensional Brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"hexagony": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/hexagony",
		"name": "Hexagony",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H;e;P1;@/;W;o;/l;;o;Q/r;l;d;2;P0"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"hobbes": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Morgan-Stanley/hobbes",
		"name": "Hobbes",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "putStr(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"hodor": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/hummingbirdtech/hodor",
		"name": "Hodor",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "hodor.hod(\"Hhodor? Hodor!? Hodor!? o,\", \"Hooodorrhodor orHodor!? d!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"homespring": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/homespring",
		"name": "Homespring",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Universe net hatchery Hello,. World!  powers a b snowmelt "
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"hspal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Hexadecimal-Stacking-Pseudo-Assembly-Language",
		"name": "Hexadecimal Stacking Pseudo-Assembly Language",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "20002140000020006440000020006C40000020007240000020006F40000020005740000020002040000020002C40000020006F40000020006C40000020006C400000200065400000200048400000140000"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"huginn": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://huginn.org/",
		"name": "Huginn",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"--no-argv"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "main() {\n\tprint(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"husk": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/barbuz/Husk",
		"name": "Husk",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "¨H◄⁰,ω]!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"hy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://hylang.org/",
		"name": "Hy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(print \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "pip"
	},
	"i": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/mlochbaum/ILanguage",
		"name": "I",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"update": "git"
	},
	"iag": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/iag",
		"name": "iag",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "|| ====<=<<=<<=<<==<==<=<<<==<=<<============<=<<=<<=<<=<<=<<=<<=<<=<<=<<=<<=<<==========<==<<<<<<=<=<<==<=<|| =<<<<<========<<<<<=<=<<<=<=<<==<=<<====<=<<=<<=<=<<==|"
						}
					}
				],
				"response": "H"
			}
		},
		"update": "git"
	},
	"icon": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/gtownsend/icon",
		"name": "Icon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "procedure main()\n    write(\"Hello, World!\")\nend"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"idris": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.idris-lang.org/",
		"name": "Idris",
		"prettify": "hs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main : IO ()\nmain = putStr \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"incident": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/incident",
		"name": "Incident",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "A1.A2.A3,A4.A5,A6,A7;A8;B1;B2,B3.B4,B5;B6.B7.B8;C1,C2.C3;C4.C5,C6;C7,:C8.D1;D2,D3.D4,D5.D6;D7.D8,E1;E2;E3;E4,E5,E6.E7,E8.F1;F2.F3.F4,F5.F6;:F7.F8;G1,G2;G3,G4;G5.G6.G7.G8;H1.H2;H3.H4.H5.H6,H7;H8;I1,I2.I3;I4,I5.:I6,I7.I8,J1;J2,J3,J4,J5;J6;J7.J8;K1;K2;K3;K4,K5,K6;K7.K8,L1;L2,L3;L4,:L5;L6;L7,L8,M1.M2.M3.M4,M5,M6,M7,M8,N1.N2;N3,N4.N5;N6,N7.N8,Z4;a1,a1.:Z3.A1,a1;a2,a2,A1,A2.a2,a3.a3.A2,A3,a3.a5,a5,A3;A5.a5,a6,a6.A5;A6.a6.:a8.a8.A6;A8.a8;b2,b2.A8;B2.b2,b4.b4,B2,B4;b4.b5;b5;B4;B5;b5.b8.b8,B5.:B8.b8.c1;c1,B8,C1;c1,c2,c2;C1;C2,c2.c5,c5;C2,C5,c5.c8.c8,C5;C8;c8,d1;:d1.C8,D1;d1.d2;d2.D1.D2.d2.d5,d5,D2.D5.d5.d8,d8;D5;D8.d8,e5.e5.D8;E5,:e5,e8,e8,E5,E8;e8,f1.f1.E8.F1;f1;f2,f2;F1.F2.f2;f5.f5;F2;F5,f5;f7;f7.:F5,F7,f7;f8.f8;F7.F8,f8,g1;g1.F8;G1.g1,g2;g2.G1,G2,g2,g3;g3;G2,G3;g3,:g4,g4.G3;G4.g4.g5.g5,G4,G5.g5;g7;g7.G5;G7,g7,g8;g8.G7,G8;g8;h4.h4,G8;:H4,h4;h8,h8,H4.H8,h8.i5.i5;H8;I5;i5.i8;i8.I5,I8,i8.j1;j1;I8,J1;j1.j3.:j3;J1,J3;j3;j4,j4.J3,J4.j4,j8,j8.J4;J8,j8.k1.k1.J8.K1,k1,k2.k2;K1,K2;:k2.k5;k5;K2,K5.k5,k8;k8,K5.K8,k8;l1,l1;K8;L1;l1,Z1;Z2;Z2,Z3.Z2;Z1.Z1,:l2;l2;L1;L2,l2;l4.l4.L2.L4;l4.l5.l5.L4;L5;l5.l8.l8,L5.L8;l8;m2;m2.L8;:M2.m2,m3,m3,M2,M3,m3;m4.m4.M3;M4.m4,m5.m5.M4,M5,m5;m7,m7.M5.M7;m7.m8.:m8,M7,M8,m8,n1;n1.M8,N1;n1.n3,n3;N1;N3,n3.n5,n5;N3,N5;n5,n6.n6.N5.N6.:n6,n7;n7;N6.N7;n7.n8,n8;N7,N8;n8,a4,a4;Z3;A4,a4;a7.a7.A4.A7;a7,b1.b1;:A7;B1,b1;b3;b3,B1,B3.b3,b6.b6;B3;B6,b6;b7;b7,B6,B7,b7;c3,c3.B7,C3,c3.:c4.c4,C3,C4.c4;c6.c6,C4,C6.c6;c7,c7;C6.C7,c7.d3;d3.C7,D3,d3;d4;d4.D3,:D4,d4;d6,d6,D4,D6.d6;d7,d7,D6,D7.d7,e1,e1;D7,E1.e1,e2,e2;E1;E2,e2.e3;:e3,E2,E3,e3.e4;e4.E3.E4;e4,e6;e6;E4,E6,e6.e7.e7;E6.E7.e7,f3,f3.E7,F3;:f3.f4;f4,F3;F4,f4;f6;f6.F4.F6,f6,g6.g6;F6.G6.g6.h1;h1;G6;H1,h1.h2;h2.:H1;H2,h2.h3,h3,H2,H3,h3.h5.h5;H3,H5;h5;h6;h6;H5.H6.h6,h7.h7.H6,H7.h7;:i1,i1,H7.I1,i1.i2;i2;I1;I2,i2,i3.i3,I2,I3.i3;i4;i4;I3,I4,i4.i6,i6,I4.:I6,i6.i7.i7,I6;I7;i7.j2;j2;I7.J2;j2,j5;j5.J2.J5;j5.j6,j6.J5,J6,j6;j7;:j7;J6,J7.j7;k3,k3;J7.K3.k3.k4.k4,K3.K4;k4,k6;k6,K4.K6;k6,k7.k7;K6,K7.:k7,l3.l3.K7;L3;l3.l6;l6,L3;L6,l6;l7,l7,L6;L7.l7,m1.m1,L7;M1;m1,m6;m6,:M1;M6,m6;n2;n2;M6,N2,n2;n4.n4,N2;N4,n4.N8.N4,Z4,Z4"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"ink": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/inkle/ink",
		"name": "ink",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"intercal": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://www.catb.org/~esr/intercal/",
		"name": "INTERCAL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "DO,1<-#14 DO,1SUB#1<-#238 DO,1SUB#2<-#108 DO,1SUB#3<-#112 PLEASE DO,1SUB#4<-#256 DO,1SUB#5<-#64 DO,1SUB#6<-#194 PLEASE DO,1SUB#7<-#48 DO,1SUB#8<-#26 DO,1SUB#9<-#244 PLEASE DO,1SUB#10<-#168 DO,1SUB#11<-#24 DO,1SUB#12<-#16 PLEASE DO,1SUB#13<-#162 DO,1SUB#14<-#52 DO READ OUT,1 DO GIVE UP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"io": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://iolanguage.org/",
		"name": "Io",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" print"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"j": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://jsoftware.com/",
		"name": "J",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"jael": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/eduardoHoefel/JAEL",
		"name": "JAEL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "π!"
						}
					}
				],
				"response": "3.141592653589793"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"jq": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://stedolan.github.io/jq/",
		"name": "jq",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"--null-input",
								"--raw-output"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"jx": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.2bestsystems.com/foundation/j/jx1/",
		"name": "Jx",
		"piggyback": "j",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"j-uby": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cyoce/J-uby",
		"name": "J-uby",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "put = :puts & $>\nput ^ \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"japt": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ETHproductions/japt",
		"name": "Japt",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`HÁM, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"java-jdk": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://jdk.java.net/",
		"name": "Java (JDK)",
		"prettify": "java",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "no-version"
	},
	"java-openjdk": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://openjdk.java.net/",
		"name": "Java (OpenJDK 8)",
		"prettify": "java",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "dnf"
	},
	"javascript-babel-node": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://babeljs.io/",
		"name": "JavaScript (Babel Node)",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "npm"
	},
	"javascript-node": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://nodejs.org",
		"name": "JavaScript (Node.js)",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "manual"
	},
	"javascript-spidermonkey": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Releases/45",
		"name": "JavaScript (SpiderMonkey)",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "manual"
	},
	"javascript-v8": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://v8.dev/",
		"name": "JavaScript (V8)",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"jelly": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DennisMitchell/jelly",
		"name": "Jelly",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“3ḅaė;œ»"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"jellyfish": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/iatorm/jellyfish",
		"name": "Jellyfish",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "P\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"joy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.latrobe.edu.au/humanities/research/research-projects/past-projects/joy-programming-language",
		"name": "Joy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "stdout \"Hello, World!\" fputstring pop.\nquit"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"julia": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 0.4",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"julia1x": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 1.0",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"julia5": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 0.5",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"julia6": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 0.6",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"julia7": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://julialang.org/",
		"name": "Julia 0.7",
		"prettify": "julia",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"k-kona": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/kevinlawler/kona",
		"name": "K (Kona)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`0:\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"k-ngn": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://bitbucket.org/ngn/k",
		"name": "K (ngn/k)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "1@\"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"k-ok": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/JohnEarnest/ok",
		"name": "K (oK)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "{}`0:\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"kavod": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/kavod",
		"name": "kavod",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72#101#108#108#111#44#32#87#111#114#108#100#33#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"keg": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/JonoCode9374/Keg",
		"name": "Keg",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello\\, World\\!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"kipple-cipple": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/graue/esofiles/tree/master/kipple",
		"name": "Kipple (cipple)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\">o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"klein": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Wheatwizard/Klein",
		"name": "Klein",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"@"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"000",
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"koberi-c": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fpeterek/Koberi-C",
		"name": "Kobeři-C",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(int main()\n\t(print \"Hello, World!\"))"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"koka": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/koka-lang/koka",
		"name": "Koka",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "fun main() {\n  println(\"Hello, World!\")\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"kotlin": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://kotlinlang.org",
		"name": "Kotlin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "fun main(args: Array<String>) {\n\tprintln(\"Hello, World!\")\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags",
			"options"
		],
		"update": "github-release"
	},
	"krrp": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/jfrech/krrp",
		"name": "krrp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"--str"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "\\LL$72.L$101.L$108.L$108.L$111.L$44.L$32.L$87.L$111.L$114.L$108.L$100.L$33.E"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"ksh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.kornshell.com/",
		"name": "ksh",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"l33t": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/l33t",
		"name": "l33t",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "// \"Hello World\" by Stephen McGreal.\n// Note that the views expressed in this source code do not necessarily coincide with those of the author :o)\n\nGr34t l33tN3$$? \nM3h...\niT 41n't s0 7rIckY.\n\nl33t sP33k is U8er keWl 4nD eA5y wehn u 7hink 1t tHr0uGh.\n1f u w4nn4be UB3R-l33t u d3f1n1t3lY w4nt in 0n a b4d4sS h4xX0r1ng s1tE!!! ;p\nw4r3Z c0ll3cT10n2 r 7eh l3Et3r!\n\nQu4k3 cL4nS r 7eh bE5t tH1ng 1n teh 3nTIr3 w0rlD!!!\ng4m3s wh3r3 u g3t to 5h00t ppl r 70tAl1_y w1cK1d!!\nI'M teh fr4GM4stEr aN I'lL t0t41_1Ly wIpE teh phr34k1ng fL00r ***j3d1 5tYlE*** wItH y0uR h1dE!!!! L0L0L0L!\nt3lEphR4gG1nG l4m3rs wit mY m8tes r34lLy k1kK$ A$$\n\nl33t hAxX0r$ CrE4t3 u8er- k3wL 5tUff lIkE n34t pR0gR4mm1nG lAnguidGe$...\ns0m3tIm3$ teh l4nGu4gES l00k jUst l1k3 rE41_ 0neS 7o mAkE ppl Th1nk th3y'r3 ju$t n0rMal lEE7 5pEEk but th3y're 5ecRetLy c0dE!!!!\nn080DY unDer5tAnD$ l33t SpEaK 4p4rT fr0m j3d1!!!!!\n50mE kId 0n A me$$4gEb04rD m1ghT 8E a r0xX0r1nG hAxX0r wH0 w4nT2 t0 bR34k 5tuFf, 0r mAyb3 ju5t sh0w 7eh wAy5 l33t ppl cAn 8E m0re lIkE y0d4!!! hE i5 teh u8ER!!!!\n1t m1ght 8E 5omE v1rus 0r a Pl4ySt4tI0n ch34t c0dE.\n1t 3v3n MiTe jUs7 s4y \"H3LL0 W0RLD!!!\" u ju5t cAn'T gu3s5.\ntH3r3's n3v3r anY p0iNt l00KiNg sC3pT1c4l c0s th4t, be1_1Ev3 iT 0r n0t, 1s whAt th1s 1s!!!!!\n\n5uxX0r5!!!L0L0L0L0L!!!!!!!"
						}
					}
				],
				"response": "H3LL0 W0RLD!!!"
			}
		},
		"update": "git"
	},
	"labyrinth": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/labyrinth",
		"name": "Labyrinth",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72.10:1.:8:..:):1:.#2#4..:1..4.:8.0.33.@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"lean": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://leanprover.github.io/",
		"name": "Lean",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"lily": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://fascinatedbox.github.io/lily/",
		"name": "Lily",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"llvm": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://llvm.org/docs/LangRef.html",
		"name": "LLVM IR",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@str = internal constant [14 x i8] c\"Hello, World!\\00\"\ndeclare i32 @puts(i8*)\ndefine i32 @main()\n{\n  call i32 @puts( i8* getelementptr ([14 x i8], [14 x i8]* @str, i32 0,i32 0))\n  ret i32 0\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"lmbm": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dylanrenwick/lmbm",
		"name": "Lean Mean Bean Machine",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "OOOOOOOOOOOOO\n\"\"\"\"\"\"\"\"\"\"\"\"\"\nHello, World!\nUUUUUUUUUUUUU"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lnusp": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/lnusp",
		"name": "LNUSP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "001 . !.!                  .OUTPUT          .EXIT\n001  .   !                 .                .\n001 ! .  !                 .                .\n001 .  !!                  .                .\n001 *                      .                .\n033 + !                    .                .\n001 *                      .                .\n100 + d                    .                .\n001 *                      .                .\n108 + l                    .                .\n001 *                      .                .\n114 + r                    .                .\n001 *                      .                .\n111 + o                    .                .\n001 *                      .                .\n087 + W                    .                .\n001 *                      .                .\n032 +                      .                .\n001 *                      .                .\n044 + ,                    .                .\n001 *                      .                .\n111 + o                    .                .\n001 *                      .                .\n108 + l                    .                .\n001 *                      .                .\n108 + l                    .                .\n001 *                      .                .\n101 + e                    .                .\n001 *                      .                .\n072 + H                    .                .\n001 *                      .                !\n001 .                      .               .\n001 .                      .              .\n001 .                      .             .\n001 .                      .            .\n001 !                      .           .\n001  .                     .          .\n001   .                    .         .\n001    .                   .        .\n001     .                @ .       .\n001      .                +.      .\n001       .                !     .\n001        .               .    .\n001         .           ?.....?@\n001          .         ?   .   ?\n001           .        .   .   *\n001            .       ?   .   ?\n001             !.......?..@..?"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"locksmith": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Locksmith",
		"name": "Locksmith",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "070271901007101719010071087190100710871901017101719040471903027190807719010171017190101710471901007108719010071007190303719"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"logicode": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/LogicodeLang/Logicode",
		"name": "Logicode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "var a=11011\nvar l=@(a+00)\nvar o=a+11\nout @1001000+@1100101+l+l+@o+@101100+@100000+@1010111+@o+@1110010+l+@1100100+@100001"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lolcode": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://lolcode.org/",
		"name": "LOLCODE",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "HAI 1.2\nVISIBLE \"Hello, World!\"\nKTHXBYE"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lost": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Wheatwizard/Lost",
		"name": "Lost",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "v<<<<<<<<<<<>>>>>>>>>>>>\n>%?!|\"Hello, WorldvU\"-+@\n   v"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lower": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/LOWER",
		"name": "LOWER",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "ₔₓ₇₂ₔₓ₁₀₁ₔₓ₁₀₈ₔₓ₁₀₈ₔₓ₁₁₁ₔₓ₄₄ₔₓ₃₂ₔₓ₈₇ₔₓ₁₁₁ₔₓ₁₁₄ₔₓ₁₀₈ₔₓ₁₀₀ₔₓ₃₃"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"lua": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.lua.org/",
		"name": "Lua",
		"prettify": "lua",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"lua-luajit": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://luajit.org/",
		"name": "Lua (LuaJIT)",
		"prettify": "lua",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"lua-openresty": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://openresty.org/en/",
		"name": "Lua (OpenResty)",
		"prettify": "lua",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"ly": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/LyricLy/Ly",
		"name": "Ly",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"&o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"m": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DennisMitchell/m",
		"name": "M",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "“Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"m4": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/m4/m4.html",
		"name": "M4",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"machinecode": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/aaronryank/MachineCode",
		"name": "MachineCode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "4889f8c60748c6470165c647036cc647026cc647046fc647052cc6470620c6470757c647086fc6470972c6470a6cc6470b64c6470c21c6470d00c3\nsbrk()\ns"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"make": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/make/",
		"name": "Make",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "$(info Hello, World!)\n\n.PHONY: main\n\nmain:\n\t@:"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"malbolge": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/malbolge",
		"name": "Malbolge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "('&%:9]!~}|z2Vxwv-,POqponl$Hjihf|B@@>,=<M:9&7Y#VV2TSn.Oe*c;(I&%$#\"mCBA?zxxv*Pb8`qo42mZF.{Iy*@dD'<;_?!\\}}|z2VxSSQ"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"malbolge-unshackled": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/malbolge-unshackled",
		"name": "Malbolge Unshackled",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "bCBA@?>=<;:9876543210/.-,I*)(E~%$#\"RQ}|{zyxwvutsrD0|nQl,+*)(f%dF\"a3_^]\n\\[ZYXWVUTSRQJmNMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$#dc~}|_^yrwZu\ntsrqpinPlOjihgf_dcEaD_^]\\UZYX:V9TSRQPONGLK.IHGF?DCB$@#>=<;4987w/v3210/\n.-,+$k('&%|#\"!~w`{zyxwputslUponmlkjiKgf_Hcba`_^]\\[ZYXWP9TSRQPONMFKJCHA\n*EDCBA@?>=<|:98y6543210).-,%*#j'&%$#\"!~}|^ty\\wvutslkTonmlkjcLafedc\\aD_\nX]\\[TY<WVOTSLQ4ONMFKDC,GFEDC<A$9>=<;49z765.3,+r/.-,l*)(!h%$#\"!~}|{zyxw\nvunWrqponmlkjihgfed]Fa`_^]\\[ZYXW9UTSRK4ONMLKJIHGFEDCBA@?8!<;:987654321\n0/.-,%l)('&%$#\"!~}|^t]xqvYnsrqpinQlejihafIdc\\a`Y^A\\[ZSXQ:8NSRQJ3NMLKJI\nHGFEDC%;$?8=<}49876543210qp',+*)('&%$#\"!b}`{zyrwpuXmrqpohmlOdihgfedcba\n`_^]\\?=S<WPU8SRQJOHM0EJIHG@ED'<A@?>=<;:987654us+r/(-,m*#('&%$#\"!~a`{ty\nxwvutsrqpoRmPkjibg`eHcb[`_X]@UZYXWPUT7RKPONMLKJIHGFED'%;$?8=~;:387054u\n2+0/.-,+*)('&%$ecyb}v{z]xwputsrqponQPkjchgfedcba`_B]@[ZSXWPU8SLQPOHML/\nJIBGFEDCBA@?>=<}{3z705v321*/(om%*)j'&}$#\"!~}|{zyxwZXnWrkpoRmlkdihgfedc\nFE`_^W\\[ZYXWVUT7R5PONGLEJ-HG@ED=B%@9>=<5:9z765.3210/.-,+*)jh~g${\"c~}v{\nzsxwZutslqponmlkjihgJH^Gb[`_B]\\[ZSXWVUTS65PONMFKJIHGFED'B%@?>7<5:9z765\n4-210/.-,+*)jh~g${dbx}|_zyxwputsrqponmlOMcLg`edGba`_^W\\[ZYX;:UTSRQJONM\nLKJI,G*EDC<A:?\"=<5:927x5.321*/p',+*)\"'&g$#\"!~w|{zyxwvutWUkTohmlOjihgf_\ndcba`_^]\\?=S<WPUT7RQPONMLEJIH+*EDCBA@?8=<;:9z7x543,1*/.o,+*)('&}$#\"!~}\n|_]s\\wputWrqponmlejihgfedGE[D_X]\\?ZYXWVUTSLQP32MLKJIHGF?DCBA$?\"=<;4927\nx54-21*/p-&+*)\"'h}$#\"!x}|_zyxwvutslqponmlOMcLg`edGba`_^]\\[TYXWVUT75K4O\nHML/JIHGFEDCBA@9\"=~;:987654321*/p-n+*)\"'~%f#\"y~}v{^sxwvunsrUponmlkjihg\nf_dcbECYB]V[>YXQVUNSR5PONMLKJIHGF?DCB%#9\"=6;:{876543210/.-&m*)j'&%$#\"!\n~}|{zs\\wZutslqjoRmfkjibgfIdcba`_^]\\[ZYRWV97M6QJ31GLK.IHGFEDCBA@?>7<;|z\n2y6/43t10/.-,+*)('&%|e\"!~a|{zyxwvutsrqpiRmlOjibgf_dGb[`_^W\\[>YXWVUTSRQ\nPONMFK.,B+F?DC&A@?>=<;:98765.3tr*q.',+l)('&%$#\"!~}|{zs\\wvutWrqponmlkji\nhgfe^Gba`C^]\\UZSX;VUNSRKP3HMLKJCHG*EDCBA@?>=<;:981xv.u2+0/p-,+*)('&%$#\n\"!~w`^t]xqvuXsrqponmlkjihgfe^Gba`_^A\\[ZYXWVUTSRQPONG0KJIH+FED=B;@?\"=<;\n:9876543210/(o,l$k(!hf|#\"c~}|{zyxwvutsrqpiRmOeNibgfIdcba`_^]\\[ZYXWVUN7\nRQPONM0KJIHGFEDCBA@?>=<5|98765v3,10/(-n%*)('~%$e\"!~}|{zyxwvutsrqjSnmOe\nNibgJe^cbaZ_^A\\[ZYXWVUTSRQPONMF/JI+A*E>CB%@?>=<;:9876543210)p-,+*)('h%\n$#\"!~}|{zyxwvutslUponmlkNihg`e^cbE`_^]\\[ZYXWVUTSRQPI2MLK-C,G@E(CB;@?8=\n~;498705v-210/(om%*)j'&%$#\"!~}|{zyxwvunWrqpRhQlejiLgfedcba`_^]\\[ZYXWVO\n87RQ4ONMLKJIHGFEDCBA@?>7~}:{876/4-2s0/(-,%*k\"'&%${\"!b}|{zyxwvutsrqponm\nleNihgfH^Gb[`C^]V[ZSXW:UTSRQPONMLKJIHGFED=&A@?>~6}:387x543210/.-,+*)('\n&%$#zc~a|{^yxwvutsrqponmlkjihg`IdGbE`_X]\\UZ=XQVUTMRQ4ONMLKJIHGFEDCBA@?\n>=6}:9876v.u2+0q.-,%*#jh~%$e\"!~}|{zyxwvutsrqpongPkjihgI_Hc\\a`C^]\\?TY<W\nVUTSR5PO2MLK.CH+FEDCBA$?\"=<;4927x54-21*/p-&+*)\"'h}$#\"!x}|_zyx[puXsrqpo\nnmlkjLbKf_dGba`Y^W\\?ZSXWVOTS6QPO2GL/JIHGFEDCBA#9\"=6;:{876w4321*/.o,+*)\n('&%$#\"c~}`{zy\\wvutmrqTonmlkjihgfeHcFa`_X]V[>YRWVUNS6KPONMFKJ-HGF)DCBA\n:?>!<;:9876543210/.n&m*#('h%$#d!~}|uzy\\wvutsrqponmlkjiKaJe^cbED_XA\\[ZY\nXWVUTSR5PO21LE.IHGFEDCBA@?\"=~;:92705v32+0/(-n%*)('~%$ed!xa|{zyxwvutsrq\nponPfOjchgJId]Fa`_^]\\[ZYXWVUTS5K4OHML/.IHA*EDCBA@?>=<;:{87xw43,s0/.-,+\n*)('&%f#\"cb}|u^yxwvutsrqponmlkjLbKf_dcFE`_XA\\[ZYXWVUTSRQPONM/E.IBGF)(C\nBA:#>=<;:98765432s0/po,+*#j'&%$#\"!~}|{zy\\wZunsrqjoRglkjibgfIHcbaZC^]\\[\nZYXWVUTSRQPON0F/JCH+F?DCB;@?\"!<;:3z76543210/.-,+*)('g}f#z!~a`{zyxqvuts\nrqponmlkjihKfeHGba`_X]\\[ZYXWVUTSRQPO2M0KJCHG@E(=BA@?8=<}|9876/43210/.-\n,+*)('&%$#\"bxa|uzy\\[vutslqponmlkjihgfedcba`_AW@[TYX;:UTSRQJONMLKJIHGFE\nDCB%@?\"!<;:9816543210/.-,+*)j'h%$#z!x}`uzyxwputWVqponmfkjihgfedcba`_^]\n\\[Z<R;VOT7RQPINGL/DIHGF?DC&%@?>=<5:9876543210/.-,+*)i!h%|#\"cb}|{zyxqvu\ntsrqponmlkjMhgJIdcba`_X]\\[ZYXWVUTSRQ4O2MLKDIBG*ED=BA:?\"7<;:9276wv3210/\n.',+*)('&%$#\"!~}|{z\\r[votWrqjonglkNMhgfedc\\a`_^]\\[ZYXWVUTSRQ3I2MFKJ-,G\nFEDCBA:?>=<;:987654u21rq.-,+*)(!&%$#\"!~}|{zy\\wZutmrqjoRmfkjibgfIHcba`_\n^]V[ZYXWVUTSRQPONML.D-HAF)DCB;@9\"~6;:{z7654321*/.-,+*)('&%$#\"!~`v_zsxw\nvutmVqponmlkjihgJedcbaZC^]\\[ZYXWVUT7R5PONGLEJ-HG@ED=B%@9>=<5:{27654-21\n0/.'n+*)('&%$#\"!~}|{]s\\wpuXsrqjohmPkdihg`edcbaZC^]\\[ZYXWVUTSRQP2H1LEJI\nHGFEDCBA:#>=<;:98765432+r/.-,+*)('&%$#zc~`v_zs\\ZputsrqponmleNiKaJe^cba\n`_^]\\[ZYRWVUTSRQPONMLKJIHGFEDCBA@?>=<;:98y65432s0/.-,+*)('&}$#\"!~}|{zy\nxwvutsrqponmlkjihgfedcFa`_^]@[>YXWPUNSRQPONMLKJIBGFEDCBA@?>=<;:9876543\n210/.-,+*)(i&%$#\"!~}|^t]xqvutsrqponmlejihgfedcba`_^]\\[ZYXWVUTSRQPONMLK\n.IHGFEDCBA#9\"=6;:9876543210/(-,+*)('&%$#\"!~}|{zyxwvutsrqponQlkjihKfedc\nba`_^]\\[ZSXWVUTSRQPONMLKJIHGFEDCBA@?>=<;|98765v3t10).-&+l)\"'&%|#dy~}|{\ntyxwvutsrqponmfkjihgfedcba`_^]\\[ZYXWVUTSRQPON1LKJIHGFED&<%@9>!<;49816w\n4-210).-,+*)('&%$#\"y~}|{zyxwvutsrqponmlkjihgfedcbaD_^]\\[ZYXW9O8SLQPONM\nLKJIHGFED=BA@?>=<;:9876543210/.-,+*)('&g$#\"!~a|{zyxwvutsrqpohmlkjihgfe\ndcba`_^]\\[ZYXWVUTSRQ4ONMLK.I,GFE>C<A$?8=<;49z16543,10/.-,+*)('&%${\"!~}\n|{zyxwvutsrqponmlkjihgfedGba`_^]\\[Z<R;VOT7RQPINGL/JCHGF?DCBA@?>=<;:987\n0543210/.-,+*)('&%$#\"!~}|{zyxwZutsrqponmOeNibgfedcba`_^]\\[ZYRWVUTSRQPO\nNMLKJIHGFEDCBA@?>=<}:9876w43210/.-,+*)('&}$#\"!~}|{zyxwvutsrqponmlkjihg\nJedcbaD_^]\\[ZYXWVUTSRQJONMLKJIHGFEDCBA@?>=<;:987654u210/.-,+*j\"i&}$e\"y\n~}|uz]rwvutmVTjonmlkjihgfedcbaZ_^]\\[ZYXWVUTSRQPONMLKJIHGFED'BA@?>=<;:z\n2y6/43210q(-,+*)('&%$#\"!~}|{zyxwvutsrqTonmlkNihgfeH]ba`_^]\\[ZYXWVUTSRQ\nPONMLKJIH+FEDCB%@#>=6;:387654u,10/.-,+*)('&%$#\"!~}|{zyxwvuXsrqponmlkMc\nLg`eHc\\a`_X]@UZYXWP97MRQPON1FKJIHGFEDCBA@?>=<;:987654321r/.-,+*)('g}f#\nz!~}|{^yrwvutsrqponmlkjihgfedcba`_^A\\[ZYX;VUTSR5PINMLKJIHGFEDCBA@?>=<;\n:98765v3210/p-,+*)j'~%$#\"!~}|{zyxwvutsrqponmlkjMhgfedcba`BXA\\UZ=XWPUTM\nR5JONMLE.,BGFEDC&A:?>=<;:9876543210/.-,+*)('&g$#\"!~}|{z\\r[votsrqpSnmfk\njihgfedcba`_^]\\[ZYXWVUTS6QPONM0KJIHG*ED=BA@?>=<;:9876543210/.-,+*k('&%\n$e\"c~}v{zsx[votsrkponmlOjibgfedcba`_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?\"=\n6;:9276543t10).-,+*)('&%$#\"!~}|{zyxwvutWrqponmlkjLbKf_dcba`C^]\\UZYXWVU\nTSRQPONMLKJIHGFEDC&A@?>=~;:987x543,10/.-,+*)('&%$#\"!~}|{zyx[vutsrUponm\nlOjihafedcba`_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?\"=<;4927x5.321*/p',+*)\"i\ng}$#\"!~a|{zsxwvutsrqponmlkjihgfedcbaD_^]\\[ZYXW9O8SLQPONM0KJIHGFEDCB;@?\n>=<;:9876543210q.-,+*k('&%$e\"!~}|{zyxwputsrqponmlkjihgfeHcba`_B]@[ZYRW\nPU8SRKPOHM0KDIHG@E(=BA@?8=<;:9z76543210/.',+*)('&%$#\"!~}|{z]xwvutsrqpR\nhQlejMhg`ed]bE`Y^]\\UZ=RWVUTMRQPON1LKJIHGFEDC<A@?>=<;:987654321r/.-,+*)\n('g}f#z!~}|{^yxwvutsrUjonmlkjihgfedcbE`_^]\\?ZYXWV9TSRQPONM0EJIHGFEDCBA\n@?>=~;:987x5v321*/(-n+$)('~%f{\"!~}v{zyxwZutsrqponQfkjihgfedcba`_^A\\[ZY\nXWVUT6L5PIN1LKJCHAF)D=BA@9>=<;:{87654321r).-,+*)('&%$#\"!b}|{zyxwvuWmVq\njonmPeNihgfedcba`_^]\\[ZY<WVUTS6QPO2G0KJIHGFEDCBA@?>=<;|98765v3t10/(-&+\nl)\"'&%|#dy~}|{tyxwZoXsrqponmlkjihgfedcFa`_^]\\[ZY;Q:UNSRQ4I2MLKJIHGFEDC\nBA@?>=~;:9876543s+r/(-,+l)\"'h%$#\"!~}|{zyxwvutsVqponmPkjiLg`eHcba`_^]\\[\nZYXWVUTS6QPONM0K.IHG@E>C&A:?>=6;|38765.321r/(-n+*)('&%$#\"!~}|{zy\\wvuts\nrqpoQgPkdihgJe^cFa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C<A@?\"=<5|9876543210/.-\n,+*)j'&%$#d!~}`{zs\\wvutsrqponmlkjihgJedcbaD_B]\\UZYRW:OTSRQJONM0KJC,GFE\nDCBA@?>=<;:987x543210/.-m%l)\"'h}$#\"!x}|{^yxqZutsrqponmlkjihgfeHcba`_^]\n\\[=S<WPUTS6QPOHM0KJIHGFEDCBA@?>=<;|98765v321r/.-&+l)('&%$#\"!~}|{zyxwZu\ntsrqToRmlkdibgJed]baZ_BW\\[ZYRWVU8SRQJO2MLKJIHGFEDCBA@?>=~;:9876543s+r/\n(-,+l)('~%f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\a`_B]\\[ZYRW:UTSRQPONMLKJIHG\nFE(CBA@?\"=<;|98765.3t10/.-,+*)('&%$#\"!b}|{zy\\wZunsrqjoRglkjibgfeHcba`_\nX]@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;|92765.321r/.-,+$)j'&%$#\"!~}|{zyxw\nvuXsrqponmlkMcLg`edcFa`_^]\\U>YXWVUTSRQPONMLKJI,GFEDC&A@?\"=<;:981x54321\n0/.-,+*)('&%f#\"!~}`{^yxwpunsVqpinmfkNchgfe^cbaD_^]\\[ZS<WVUTSRQPONMLKJI\nHG*EDCBA@?>=}5|92765v3210/.'n+*)('&%$#\"!~}|{zy\\wvutsrqpoQgPkdihgJedcba\n`_^W@[ZYXWVUTSRQPONMLK.IHGFE(CBA$?>=<;:981x543210/.-,+*)('&%f#\"!~}`{^y\nrwvunsVkponmfkjiLgfedcba`YB]\\[ZYXWVUTSRQPONM0KJIHGFEDC%;$?8=~;49870543\nt10/.-,+*#j'&%$#\"!~}|{zyxwvuXsrqponmlkMcLg`edcFa`_^]\\[ZYRW:UTSRQPONMLK\nJIHGFE(CBA@?\"=<;|987654321*/p-,+*)('&%$#\"!~}|{^yxwvuXsVqpohmfkNihafe^c\nF[`_^]V[ZY<WVUTSRQPOHM0KJIHGFEDCBA@?>=<;|987654321q)p-&+*)j'&%$#\"!~}v{\n^yxwvutsrqponmlkjiLgfedcba`_AW@[TYXW:UTSRQPONMLKDI,GFEDCBA@?>=<;:987x5\n4321r/.-n+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihgfeHcFaZ_^]V[>SXWVUNSRQ4ONM\nLKJIHGFE>C&A@?>=<;:987654321r/.-,+*)('g}f#z!b}v{zyrwvuXsrqponmlkjibgJe\ndcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?>=<;:9876/v3210/.-,+*)('&%$#d!~}\n|{^yxwZutsrqponmlkjcLgfedcba`_^]\\[ZYXW:UTSRQ4O2MLKDIBG*ED=BA:?\"7<;:927\n65v3210/.-,+*)(!h%$#\"!~}|{zyxwvutsVqponmlkjiKaJe^cbaD_^]\\[ZYXWVUTM6QPO\nNMLKJIHGFEDCBA$?>=<;:987w/v3,10/p-,+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihg\nfeHcbaD_^]\\[ZYXWVUTSLQ4ONMLKJIHGFEDCBA@?\"=<;:9z765v3210/.-,+*)('~%f#\"!\n~}|{zyxwvutsrqTonmlkjihgI_Hc\\ECY^]\\?ZYXWVUTSRQPONGL/JIHGFEDCBA@?>=<;:{\n876543210p(o,%*)(i&%$#\"!~}|{zyxwpYtsrqponmlkjihgfedGba`_^A\\[Z=XWVUTSRQ\nPONMLKD-HGFEDCBA@?>=<;:98y65432s0q.',+*#(i~%$#\"y~}|_zyxwvutsrqponmfOji\nhgfedcba`_^]\\[Z=XWVUTSRQP2H1LEJ-HAFED=BA@#>=<;:987654321*q.-,+*)('&%$#\n\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\[ZSX;VUTSRQPONMLKJIHGF)DCBA@#>=<}\n:9876543210/.-,%*k('&%$#\"!~}|{zyxwvYtsrqpSnQlkdihafI^cba`Y^]\\?ZYXWVUTS\nRQPONMLEJ-HGFEDCBA@?>=<;:98y6543210/.n&m*#('&g$#\"!~}|{zyxwvutmrUponmlk\njihgfedcba`C^]\\[ZYXWV8N7RKPON1LKJIHGFEDCBA@?>=6}:9876543210/.-,+*k('&%\n$e\"!~a|{zyxwvutsrqponmfOjihgfedcba`_^]\\[Z=XWVUT7R5PONGLEJ-HG@ED=B%:?>=\n<5:98y6543210/.-,+*)('~g$#\"!~}|{zyxwvutsrUponmlkjihJ`Id]bE`_X]\\UZYX;VU\nTSRQPONMLKJIHG@)DCBA@?>=<;:987654u210/.-,+*j\"i&}$#\"c~}|{zyxwvutsrqpong\nlOjihgfedcba`_^]\\[Z=XWVUT7RQP3NMLKJIHGFEDCBA@?>7<}:9876543210/.-,+*k('\n&%$e\"c~}|uzsx[votsrkponQlkjihgfedcba`_^]\\UZ=XWVUTSRQPONMLKJIH+FEDCBA@?\n>~6}:3zx0543t10/.-,+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihgfedcbaCYB]V[ZY<W\nVUTSRQPONMLKJIHGFEDCBA@?>=<;:98765432+r/.-,+*)('&%$#\"!~}`{zyxwZutsVqpo\nnmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLE.IHGFEDCBA@?>=<;:9z76543t1r/.-&+$)\nj'~%$#z!bw|{zyrwvuXsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONG0KJIHGFEDCBA\n@?>=<;|987654321q)p-&+l)('~%|#d!x}|{ty\\qvutslqpoRmlkjihgfedcba`_^]\\[ZY\nXWVUTSRQPONMLKJIHA*EDCBA@?>=<;:98765v3210/.-,+k#j'~%$#d!~}|{zyxwvutsrq\nponmlkjihgfedcba`_^]\\[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=<;|9876543210/.-,+\n*)('&%$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXW:U8SRQJOHM0KDIHG@E(=\nBA@?8=<;|9876543210/.-,+*)('&%$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[\nZYXWVUTS5K4OHMLK.IHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$#z!b}|{zyxwvuts\nrqponmPkjihgfedcE[D_X]\\[>YXWVUTSRQPONM0E.IHGFEDCBA@?>=<;:9z76543t10/p-\n,+*)('&%$#\"!bw`{zyxwvutsrqponmlkNihgfeHcFa`_X]V[>YRWVUNS6KPONMFKJI,GFE\nDCBA@?>=<;|3z76543210/.-,+*)('h%$#\"!~}|{]s\\wputsVqponmlkjihgfeH]Fa`_^]\n\\[ZYXWVUTSRQ4ONMLKJIHG)?(C<A@?\"=<;:987654321r/(-n+*)('&%$#\"!~}|{zy\\wvu\ntsVqpoRmlkjihgfedcbaD_X]@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|92765.3t+0/\n.-&+*)j'&%$#\"!~}|{zy\\wpuXsrqponmlkjihgfedcFa`_^]\\[ZY;Q:UNSRQ4ONMLKJIHG\nFEDC&A:?\"=<;:9876543210/.-n+*)('&%$#cyb}v{zy\\wvutsrqponmlkNihaJedcba`_\n^]\\[ZYXWVU8SRQPO2MLK.IHGFEDCBA@?>=~;:3z76543210/.-,+*)('h%$#\"!b}`{zyrw\npuXslqpohmPejihg`edcFa`_^]\\[ZYXWVU8SRK4ONMLKJIHGFEDCBA@?\"=<;:98765u-t1\n*/p-,+$)\"'h%|#\"!x}`uzyxwputsVqponmlkjihgfeHcb[D_^]\\[ZYXWVUTSRQPO2MLKJI\nHGFE'=&A:?>=~;:9876543210/p-,+$)j'&%$#\"!~}|{zyxwvuXsrqpoRmlkNihgfedcba\n`_^]@[ZYRW:UTSRQPONMLKJIHGFE(CBA@?\"=~;:92705v3,10/(-n%*)('~%$#d!~}|{zy\nxwvutsVqpohmPkjihgfedcba`_^]\\[>YXWVUTSRQ3I2MFKJI,GFEDCBA@?>=<;|98705v3\n210/.-,+*)('&%$#d!~}|{zyxwYoXslqpoRmlkjihgfedcbaD_^]\\U>YXWVUTSRQPONMLK\nJI,GFEDC&A@?\"=<;:987654321r/.-,%l)('&%$#\"!~}|{zyxwZutsrqToRmlkdibgJe^c\nbaZ_BW\\[ZYRWVU8SRQPONMLKJIHG*EDCB;$?>=<;:9876543210/p-,+*)('&%e{d!x}|{\n^yxwvutsrqponmPkjihaJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC&A@?>=<;:98765\nv3210/(-n+*)('&%$#\"!~}|{zy\\wvutsVqpoRmlkjihgfedcbaD_^]\\[TY<WVUTSRQPONM\nLKJIHG*EDCBA$?\"=<;4927x5.321*/p',+*)\"'&%f#\"!~}|{zyxwvuXsrqpohmPkjihgfe\ndcba`_^]\\[>YXWVUTSRQ3I2MFKJI,GFEDCBA@?>=<;|98765.3t10/.-,+*)('&%$#\"!b}\n|{zyxwvuWmVqjonmPkjihgfedcba`_B]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?\"=<;|987\n6543210/.-n+*)('&}f#\"!~}|{zyxwvutsrqTonmlkNiLgfe^c\\aD_X]\\[TY<QVUTSLQPO\n2MLKJIHGFEDCBA$?>=<;:3z76543210/.-,+*)('h%$#\"!~}|{]s\\wputsVqponmlkjihg\nfeHcba`_^W@[ZYXWVUTSRQPONMLK.IHGFEDCBA#9\"=6;:9z76543210/.-,+l)('&%$#z!\nb}|{zyxwvutsrqponmPkjihgJedcFa`_^]\\[ZYXWVU8SRQPONMFK.IHGFEDCBA@?>=<;:9\nz76543t1r/.-&+$)j'~%$#z!bw|{zyrwvuXsrqponmlkjihgJedcba`_X]@[ZYXWVUTSRQ\nPONMLK.IHGFEDCBA#9\"=6;:9z76543210/.-,+l)('&%$#z!b}|{zyxwvutsrqponmPkji\nhgfedcE[D_X]\\[>YXWVUTSRQPONM0KJIHGFED=&A@?>=<;:987654321r/.-,+l)('h%$#\n\"!~}|{zyxwZutsrqpongPkjihgfedcba`_^]\\[>YXWVU8S6QPOHMFK.IBGFE>C&;@?>=6;\n:9z76543210/.-,+l)('&%$#\"yb}|{zyxwvutsrqponmPkjihgfedcE[D_X]\\[>YXWVUTS\nRQPONM0KJIHGFED=&A@?>=<;:987654321r/.-,+*)('g}f#z!~}`{zyxwvutsrqpoRmlk\njihgfe^cFa`_^]\\[ZYXWVUTSRQ4ONMLK.IHG*EDCBA@?>=<;:9z76543210/(-n+*)('&%\n$#\"!~}|{zy\\wvutsVqTonmfkdiLgf_dc\\aD_X]\\[TY<QVUTSLQPO2MLKJIHGFEDCBA$?>=\n<;:98705v3210/.-,+*)('&%$#d!~}|{zyxwYoXslqpoRmlkjihgfedcbaD_^]\\[ZYXWPU\n8SRQPONMLKJIHGFEDC&A@?>=<;:9y1x5.321r/.-,+*)('&%$#d!~}|{zyxwvoXsrqponm\nlkjihgfedcFa`_^]@[ZY<WVUTSRQPONMLK.IHGFEDCBA@9\"=<;:9876543210/.-n+*)('\nh%f#\"y~}v{^sxwvunsrqTonmlkjihgfedcFa`_^]\\[ZYXQ:UTSRQPONMLKJIHGFE(CBA@?\n>=<;{3z70543t10/.-,+*)('&%f#\"!~}|{zyxqZutsrqponmlkjihgfeHcba`_^]\\[=S<W\nPUTS6QPONMLKJIHGFE(CBA@?>=<;:927x543210/.-,+*)('&%f#\"!~}`{zy\\wvutsrqpo\nnmlkNihgfedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|98165.3t1*/.-&+l#\n('&%|#\"!b}|{zyxwvutsrqTonmlkjihgfe^cFa`_^]\\[ZYXWVUTSRQ4ONMLKJIHG)?(C<A\n@?\"=<;:987654321r/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjihgfeG]FaZ_^]@[ZY\nXWVUTSRQPO2MLKJIHGFEDCBA@9\"=<;:9876543210/.-n+*)('h%$#d!~}|{zyxwvutsVq\nponmlkjihgfed]Fa`_^]\\[ZYXWVUTSRQ4ONMLK.I,GFE>C<A$?>7<;49z70543,1r).-,+\n$)('h%$#\"!~}|{zyxwZutsrqponmlkjihaJedcba`_^]\\[ZYXWVU8SRQPONMLK-C,G@EDC\n&A@?>=<;:98765v3210/.-,+*)('&}f#\"!~}|{zyxwvutsrqTonmlkjihgI_Hc\\a`_B]\\[\nZYXWVUTSRQ4ONMLKJIHGFEDCBA@?8=~;:9876543210/.-,+l)('&%f#\"!b}|{zyxwvuts\nrqTonmlkjihgfedcba`_X]@[ZYXWVUTSRQPONMLK.IHGFE(CBA$?>=<;:9876543t10/.-\n,+*)('&%$#\"!x}`{zyxwvutsrqponmlkNihgfedcbaCYB]V[>YXQVUNS6QJONMFK.CHGFE\n>'%;@?>!<;:9876543210q.-,+*)('&%$#\"!~}|uz]xwvutsrqponmlkjihKfedcba`_^@\nV?ZSXWV9TSRQPONMLKJIH+FEDCBA@?>=<;:98765.u210/.-,+*)('&%$#\"c~}|{z]xwvY\ntsrqponmlkjihKfedcba`_^]\\[ZYXWVUN7RQPONMLKJIHGFEDCB%@?>=<}:{876/4-2s*/\n.-,%*)(i&%$#\"!~}|{zyx[vutsrqponmlkjihgfe^Gba`_^]\\[ZYXWVUTSR5PONMLKJIH*\n@)D=B%:?>=<5:98y6543210/.-,+*k('&%$#\"!~}|{zyxwvunWrqponmlkjihgfedcbE`_\n^]\\[ZYX:P9TMRQP3NMLKJIHGFEDCB%@?>=<;:9876543210/.',m*)('&%$#\"!~}|{zyx[\nvutsrUponQlkjihgfedcba`C^]\\[ZYXWVUTSRQPONMLEJ-HGFEDCBA@?>=<;:98y65432s\n0q(-,+*#('&g$#\"!~}|{zyxwvYtsrqponmlkjihgfedcb[`C^]\\[ZYXWVUTSRQPON1LKJI\nHGFED&<%@9>!6;:981654u210/.-,+*)('&g$#\"!~}|{zyxwvutsrqpinQlkjihgfedcba\n`_^]\\?ZYXWVUTSR4J3NGLKJ-HGFEDCBA@?>=<}:9876543210/.-,+*)('~g$#\"!~}|{zy\nxwvutsrUponmlOjihKfedcba`_^]\\[Z=XWVUTSRQPONMLKJIHGFE>'BA@?>=<;:9876543\n2s0/.-,m*k('&}${\"c~}v{zsxwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUTSL5PONMLK\nJIHGFEDCBA@#>=<;:9876v.u2+rp(-,+l)('&%$#\"!~}|{^yxwvutsrqponmlkjihgf_Hc\nba`_^]\\[ZYXWVUTS6QPONMLKJI+A*E>CBA$?>=<;:9876543t10/.-,+*)('&%$#\"!~}|{\nty\\wvutsrqponmlkjihgJedcbaD_^]@[ZYXWVUTSRQPO2MLKJIHGFEDCBA@?>=<;:927x5\n43210/.-,+*)('&%f#\"!~}`{^yxwpunsVqjonmfkjiLgfedcba`_^]\\[>YXWVUTSRQPONM\nLKJIHGFE>C&A@?>=<;:987654321r/.-,+*)('g}f#z!b}|uzyr[YotsrUponmlkjihgfe\ndGba`_^]\\[ZYXWVUTSRQPONGL/JIHGFEDCBA@?>=<;:{876543210p(o,%*)(i&%$#\"!~}\n|{zyx[vutsrqponmlkjihgfedcbaZC^]\\[ZYXWVUTSRQPON1LKJIH+FED'BA@?>=<;:987\n6w43210/.-,+*)('&%$#\"!~}v_zyxwvutsrqponmlkjMhgfedGbE`_^W\\UZYX;VUTSRQPO\nNMLKJ-HGFEDCBA@?>=<;:9876543,s0/.-,+*)('&%$#\"!~a|{zyxwvutVlUpiRPfkjiLg\nfedcba`_^]\\[>YXWVUTSRQPONMLKJIHGFED=&A@?>=<;:987654321r/.-,+*)('g}f#z!\n~}`{zyxwvutsrqpoRmlkjihgfedcba`_^]\\[ZYXWPU8SRQPONMLKJIHGFEDC&A@?>=~;:9\nz76543210/.-,+l)('&%$#\"!~}|{zyxwvutsrqjoRmlkjihgfedcba`_^]@[ZYXW:UTS6Q\nPONMLKJIHGFE(CBA@?>=<;:9876543210/.-&+l)('&%$#\"!~}|{zyxwZutsrqponmOeNi\nbgJedc\\aZCAW\\[Z=XWVUTSRQPONML/JIHGFEDCBA@?>=<;:987654-2s0/.-,+*)('&%$#\n\"!~a|{zyxwvutVlUpinmlOjihgfedcba`_^A\\[ZYXWVUTSRQPONMLKJIHGFE>'BA@?>=<;\n:98765432s0/.-,m*)(i&%$#\"!~}|{zyx[vutsrqponmlkjihgfedcba`_XA\\[ZYXWVUTS\nRQPONML/JIHGF)DCB%@?>=<;:987654u210/.-,+*)('&%$#\"!~}|{zyr[vutsrqponmlk\njihgfIdcba`_^]\\>T=XQV9TSLQPIN1LEJIHAF)>CBA@9\"~6;:9z76543210/.-,+l)('&%\n$#\"!~}|{zyxwvutsrqpiRmlkjihgfedcba`_^]@[ZYXWVUTS5K4OHMLK.IHGFEDCBA@?>=\n~;:9876543210/.-,+*)('&%$#z!b}|{zyxwvutsrqponmPkjihgJedcFa`_^]\\[ZYXWVU\n8SRQPONMLKJIHGFEDCBA@?>=<;49z76543210/.-,+*)('h%$#\"!b}|{^yxwvutsrqponm\nPkjihgfedcba`_^]\\[ZYXWVUTSLQ4ONMLKJIHGFEDCBA@?\"=<;:98765u-t1*/.-n+*)('\n&%$#\"!~}`{zyxwvutsrqponmlkjihgfedc\\aD_^]\\[ZYXWVUTSRQPO2MLKJIHGFE'=&A:?\n>=~;:9876543210/p-,+*)('&%$#\"!~}|{zyxwvutsrkTonmlkjihgfedcba`_B]\\[ZY<W\nVU8SRQPONMLKJIHG*EDCBA@?>=<;:9876543210/.-,%l)('&%$#\"!~}|{zyxwZutsrqTo\nRmlkdibgfeHcba`_^]\\[ZYXW:UTSRQPONMLKJIHGFEDCBA@?>=<5|9876543210/.-,+*)\nj'&%$#\"!~}_u^yrwZutmrqjoRmfkjibgJ_dcbaZCAW\\[Z=XWVUTSRQPONML/JIHGFEDCBA\n@?>=<;:987654321*q.-,+*)('&%$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\?ZY\nXWVUTSRQPONMLKJIHGFEDCBA@9>!<;:9876543210/.-,m*)('&g$#\"c~}|{zyxwvutsrU\nponmlkjihgfedcba`_^]\\[ZYXWVOT7RQPONMLKJIHGFEDCB%@?>=<}:{876/4-2s*/.-,%\n*)(i&%$#\"!~}|{zyx[vutsrqponmlkjihgfedcba`_^]\\UZ=XWVUTSRQPONMLKJIH+FEDC\nBA@?>~6}:38y654-2+0q(-,+*#('&g$#\"!~}|{zyxwvYtsrqponmlkjihgfedcba`_^]\\[\nZSX;VUTSRQPONMLKJIHGF)DCBA@?>=<|4{81654u210/.-,+*)('&g$#\"!~}|{zyxwvuts\nrqponmlkjihg`Idcba`_^]\\[ZYXWVUT7RQPON1LKJ-HGFEDCBA@?>=<}:9876543210/.-\n,+*)('&%$#\"!~}v_zyxwvutsrqponmlkjMhgfedGbE`_X]\\UZ=RWVUTMRQP3NMLKJIHGFE\nDCB%@?>=<;:9876543210/.-,+*)('&%|e\"!~}|{zyxwvutsrqpSnmlkjihgfH^Gb[`_^A\n\\[ZYXWVUTSRQP3NMLKJIHGFEDCBA@?>=<;:9876543,s0/.-,+*)('&%$#\"!~a|{zyxwvu\ntVlUpinmlOjihgfedcba`_^A\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@9>!<;:9876543210/\n.-,m*)('&g$#\"c~}|{zyxwvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTMR5PONMLKJIHG\nFEDCBA@#>=<;:{8y654-2+0q.-&+*#(i~%$#\"y~}|_zyxwvutsrqponQlkjihgfedcba`_\n^]\\[ZYXWVUTSRQPIN1LKJIHGFEDCBA@?>=<}:98765432r*q.',m*)\"'&}$#\"c~}|{zyxw\nvutsrUponmlkjihgfedcba`_^]\\[ZYXWVUTMR5PONMLKJIHGFEDCBA@#>=<;:9876v.u2+\n0/.o,+*)('&%$#\"!~a|{zyxwvutsrqponmlkjihgfedcba`_XA\\[ZYXWVUTSRQPONML/JI\nHGF)DCB%@?>=<;:987654u210/.-,+*)('&%$#\"!~}|{zyxwvutslUponmlkjihgfedcba\n`C^]\\[Z=X;VUTMRKP3NMFKJCH+F?DCB;@?>!<;:9876543210q.-,+*)('&%$#\"!~}|{zy\nxwvutsrqpohQlkjihgfedcba`_^]\\?ZYXWVUTSR4J3NG0.DIHG*EDCBA@?>=<;:9z76543\n210/.-,+*)('&%$#\"!~}|{zyxqZutsrqponmlkjihgfeHcba`_^]\\[=S<WPUTS6QPONMLK\nJIHGFE(CBA@?>=<;:9876543210/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkjiLgfeHc\nba`_^]\\[ZYXW:UTSRQPONMLKJIHGFEDCBA@?>=<;:98705v3210/.-,+*)('&%$#d!~}|{\n^y\\wvotslqTinmlkdihgJedcba`_^]\\[ZY<WVUTSRQPONMLKJIHGFEDCBA@?>=<;:927x5\n43210/.-,+*)('&%f#\"!~}|{zy[qZunsrqTonmlkjihgfedcFa`_^]\\[ZYXWVUTSRQPONM\nLKJIHGFEDC<A$?>=<;:9876543210/p-,+*)('&%e{d!x}|{^yxwvutsrqponmPkjihgfe\ndcba`_^]\\[ZYXWVUTSRQPONMLE.IHGFEDCBA@?>=<;:9z76543t10/p-,+*)('&%$#\"!b}\n|{zyxwvutsrqponmlkjihgfedcba`_^W@[ZYXWVUTSRQPONMLK.IHGFE(C&A@?8=6;|981\n65.3t+0/.-&+*)j'&%$#\"!~}|{zy\\wvutsrqponmlkjihgfedcba`_^]\\[ZYXQ:UTSRQPO\nNMLKJIHGFE(CBA@?>=<;{3z705v32+0/(-,+l)('&%$#\"!~}|{^yxwvutsrqponmlkjihg\nfedcba`_^]\\[ZS<WVUTSRQPONMLKJIHG*EDCBA@?>=}5|92765v3210/.-,+*)('h%$#\"!\n~}|{zyxwvutsrqponmlkjihgfedc\\aD_^]\\[ZYXWVUTSRQPO2MLKJI,GFE(CBA@?>=<;:9\n87x543210/.-,+*)('&%$#\"!~}|{zyxwvutslqTonmlkjihgfedcba`_B]\\[ZY<WVU8SRQ\nPONMLKJIHG*EDCBA@?>=<;:9876543210/.-,+*)('&%|#d!~}|{zyxwvutsrqpoRmlkji\nhgfeG]FaZ_B]\\UZYRW:OTSRQJ31GLKJ-HGFEDCBA@?>=<}:9876543210/.-,+*)('&%$#\n\"!~}|{zyxqvYtsrqponmlkjihgfedGba`_^]\\[Z<R;VOTSR5PONMLKJIHGFED'BA@?>=<;\n:9876543210/.-,+*)('&%$#\"!xa|{zyxwvutsrqponmlOjihgfIdcbE`_^]\\[ZYXWVUT7\nRQPONMLKJIHGFEDCBA@?>=<;:987654321*q.-,+*)('&%$#\"!~}|_zyxwvYtWrqjonglO\ndihgf_dcbE`_^]\\[ZYXWVUT7RQPONMLKJIHGFEDCBA@?>=<;:987654321*q.-,+*)('&%\n$#\"!~}|_zyxwvutsrTjSnglkjMhgfedcba`_^]\\?ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=\n<;:92y6543210/.-,+*)('&g$#\"!~}|{z\\r[votsrUponmlkjihgfedGba`_^]\\[ZYXWVU\nTSRQPONMLKJIHGFEDCBA@9>!<;:9876543210/.-,m*)('&g$#\"c~}|{zyxwvutsrUponm\nlkjihgfedcba`_^]\\[ZYXWVUTSRQPONGL/JIHGFEDCBA@?>=<;:{87654u2s0/.',%*k('\n~%${\"cx}|{zsxwvYtsrqponmlkjihKfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFED=B%@?\n>=<;:9876543210q.-,+*)('&f|e\"y~a|{tyxqvutWrqponmlkjihgfIdcba`_^]\\[ZYXW\nVUTSRQPONMLKJIHGFEDCB;@#>=<;:9876543210/.o,+*)('&%$dzc~w|{z]xwvutsrqpo\nnmlOjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHG@)DCBA@?>=<;:987654u210/.o,+*k\n('&%$#\"!~}|{z]xwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUN7RQPONMLKJIHGFEDCB%\n@?>=<}:98y6543210/.-,+*k('&%$#\"!~}|{zyxwvutsrqponmlkjihgfedc\\E`_^]\\[ZY\nXWVUTSRQP3NMLKJIHGF(>'B;@#>=<5:38y6/432+0q(-,+*#jh~%$#d!~}|{zyxwvutsVq\nponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONG0KJIHGFEDCBA@?>=<;|98765v3210/.-,+\n*)('&%$#\"caa|{zyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311LKJIHGFED'\n%%@?>=<;:98yww43210/.-,mkk('&%$#\"!~a__zyxwvutsrUSSnPlkjiLaJedcba`CXA\\>\nZS<QV97ML53O20FE.,,**((&&$$\">=~5|9y70w.32s*q.n,+*)('h}f#\"!~}|{z]r[vXtm\nVkpSQgfOMiLJ`_HFbECYXA??==;;99775Q42HG0.JIHG*?(C%A:#8=~|43zx6wu-,sqqoo\nmmkkiig%fdzyb`|{zy\\qZutsrqponmlO*ihgfedcba`_^]\\[ZYXWVUTS6QPONML/--gGFE\nDCBA@#!!<;:987654uss0/.-,+*)(igg$#\"!~}|{z][[vutsrqponQOOjihgfedcbECC^]\n\\[ZYXWV977RQPONMLKJ-++FEDCBA@?>!}}:98765432sqq.n,+*)j!h%$#\"!~av_z\\xqZo\ntWUkjSQQOkNLbaJHHFbECYXA??==;;997SR5J3N0LE.CH+)?>'%%##!!}}{98y0w4t210/\n.-n%l)('&%$#\"cxa|^zs\\qvYWmlUSoRPfeNLLJJHdGE[ZCA]@>TS<::88664P31GF/-IHG\nF)>'B$@9\"7<}{32ywwuussqqo-nl$#jhhffddb~a_ut][wvutWlUponmlkjihgJ%dcba`_\n^]\\[ZY<WVUTSR533mMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$#\"caa|{zyxw\nvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311LKJIHGFED'%%@?>=<;:98yww4t21\n0/p'n+*)('&g|e\"b~w`uz][qpYWsVTjiRPPNNLLJJHdcF[D_A]V?TY<:PO86R53IH1//--\n++))'CB%:#>~<;:987x/v3210/.-,m$k(h&}f{\"cawv_]y\\ZpoXVrUSihQOkNLbaJHHFFD\n`CAWV?==;;9U86LK42NMLK.C,G)E>'<A$\"87~||zzx6wu-,sqqoom+lj\"!hf$#\"!bw`{zy\nxwvutsrU0onmlkjihgfedcba`_B]\\[ZYX;99srRQP3NMLKJIHG*((CBA@?>=<;|zz76543\n210/pnn+*)('&%$#dbb}|{zyxwvuXVVqponmlkjiLJJedcba`_^]@>>YXWVUTSRQ422MLK\nJIHGFE(&&A@?>=<;:9zxx5u3210q(o,+*)('h}f#c!xav{^\\rqZXXVrUSihQOkNLbaJHHF\nFDDBB@\\[>S<W9UN7LQ42HG0..,H+)?>'%A$\"87~||zzxxvvt21r)p-m+*)('&g|e\"!~}|{\nzy\\qZuWslUjoRPfeNLhKI_^GEaDBXW@>Z=;QP97S64JI20L/-CB+))''%A$\"87~|:987x/\nv3s1*q(-nl$#jhhf$ecyxa_{^\\rqZXXVVTpSQgfOMihgfI^Gba`_^]\\[ZY<uVUTSRQPONM\nLKJIHGFED'BA@?>=~||X87654321rpp-,+*)('&%fdd!~}|{zyxwZXXsrqponmlkNLLgfe\ndcba`_B@@[ZYXWVUTS644ONMLKJIHG*((CBA@?>=<;|zz76543210/pnn+*)('&%$#dbb}\n_{zyx[pYtsrqpoRgPkMibK`eHF\\[DB^A?UT=;W:8NM64P31GF/--++))''%%#?>!6}:z81\nx/4us+*qo-nl$#jhhffddbb``^zy\\qZuWsrqponQfOjihgfedcF[D_A]V?TY<:PO8664P3\n1GF/-I,*@?(&&$@#!76}{{yyw5vt,+rp.-,+l#j'g%|ez!b`vu^\\\\ZvYWmlUSoRPfeNLLJ\nJHHFFD`CAWV?=YXWV9N7RQPONMLKJI,eFEDCBA@?>=<}:98765vttP0/.-,+*)jhh%$#\"!\n~}|{^\\\\wvutsrqpoRPPkjihgfedcFDD_^]\\[ZYXW:88SRQPONMLK.,,GFEDCBA@?\"~~;:9\n876543trr/.-,+*)('hff#\"!~}|{zy\\ZZuWsrqpShQlkjihgJ_HcEaZCX]@>TS<:V97ML5\n331M0.DC,**((&&$$\"\"~<;|3z7w5.u,1rp('nllj(ig}|eccaa__]][[YutWlUpRnmlkji\nLaJedcba`_^AV?Z<XQ:OT75KJ311//--+G*(>=&$@#!76}{{yyw5vt,+rp.-,+l#j'g%|e\nz!b`vu^\\xwvuXmVqponmlkjihK&edcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;\n:987x543210qooK+*)('&%$ecc~}|{zyxwvYWWrqponmlkjMKKfedcba`_^A??ZYXWVUTS\nR533NMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$#\"caa|{zyxwvutWUUpRnmlk\nNcLgfedcbEZC^@\\U>SX;9ON7553O20FE.,H+)?>'%A$\"87~||zzxxvvt21r)p-m+$k\"'hf\n|{db~a_ut][wZXnmVTTRRPPNNLhgJ_HcEa`_^]\\?T=XWVUTSRQ4I2M/KD-BG*(>=&$@#!7\n6}{9zx0/vt2sq)(om+lj\"!hffddb~a_ut][[YuXVlkTRnmlkNcLgIe^G\\aDBXW@>><X;9O\nN755331M0.DC,**(D'%;:#!=<;:{2y6543210/.-nI*k('&%$#dbb>|{zyxwvuXVVqponm\nlkjiLJJedcba`_^]@>>YXWVUTSRQ422MLKJIHGFE(&&A@?>=<;:9zxx543210/.-nll)('\n&%$#\"!b``{zyxwvutsVTTonmlkjihgJHHcEa`_^AV?ZYXWVU8M6Q3OH1FK.,BA*((&B%#9\n8!};|z21xvvttrrppn,+l#j'g%|ez!b`vu^\\\\ZvYWmlUSoRPfeNLLJJHHFFD`_BW@[=YXW\nVUT7L5PONMLKJI,A*E'C<%:?\"~65|zzx6wu-,sqqo-nl$#jhhf$ecyxa_{zyx[pYtVrkTi\nnQOedMKKIeHF\\[DB^]\\[>S<WVUTSRQPON1jKJIHGFEDCBA@?>=<;:9876543210/.-,+*)\n('&%$#\"!~}|_zyxwvuXVV2ponmlkjiLJJedcba`_^]@>>YXWVUTSRQ422MLKJIHGFE(&&A\n@?>=<;:9zxx543210/.-nll)('&%$#\"!b``{zyxwvutsVTTonmlkjihgJHHcba`_^]\\[><\n<W9UTSR5J3NMLKJI,A*E'C<%:?\"~65|zzx6wu-,sq/pn&%ljjhhffddb~}`u^y[wpYnsVT\njiRPlOMcbKIIGGEECCA]\\?T=X:VUTSRQ4I2MLKJIHGF)>'B$@9\"7<}{32yw5vt,+rppn,m\nk#\"igge#dbxw`^z][qpYWWUqTRhgPNjihgJ_HcEaZCX]@>TS<:V97ML5331M0.DC,*FEDC\n&;$?>=<;:9876wR3210/.-,+*)('&%$#\"!~}`{zyxwvYWW3qponmlkjMKKfedcba`_^A??\nZYXWVUTSR533NMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$#\"caa|{zyxwvutW\nUUponmlkjihKIIdcba`_^]\\?==X:VUTS6K4ONMLKJ-B+F(D=&;@#!76}{9zx0/vttrrppn\nnl*)j!h%e#zcx}`^ts\\ZvYWmlUSSQQOOMMKgfI^GbD`_^]\\[>S<WVUTSRQP3H1L.JC,AF)\n'=<%#?\"~65|z8yw/.us1rp('nllj(ig}|ec!b`vu^\\x[YonWUUSoRPfeNLhgfeH]FaC_XA\nV[><RQ:8866442N1/ED-+G*(>=&$$\">!}54{y7654u,s0/.-,+*)('hC$e\"!~}|{^\\\\8vu\ntsrqpoRPPkjihgfedcFDD_^]\\[ZYXW:88SRQPONMLK.,,GFEDCBA@?\"~~;:9876543trr/\n.-,+*)('hff#\"!~}|{zy\\ZZutsrqponmPNNihgfedcbaDBB]?[ZYX;P9TSRQPO2G0K-IB+\n@E(&<;$\"\"~<}{32ywwu3tr*)pnnlljjhhf$#dyb}_{t]rwZXnmVTTRRPPNjMKa`IGGEECC\nAA?[Z=R;V8TSRQPO2G0KJIHGFED'<%@\">7~5:{y10wu3tr*)pn,mk#\"igge#dbxw`^z][q\npYWWUqTRhgPNjihgJ_HcEaZCX]@>TS<::8866442N1/ED-++)E(&<;$\">=<;|3z7654321\n0/.oJ+*)('&%$#\"!~}|{zyxwvutsrqponmPkjihgfIGG#a`_^]\\[Z=;;VUTSRQPON1//JI\nHGFEDCB%##>=<;:9876wuu210/.-,+*kii&%$#\"!~}|_]]xwvutsrqpSQQlkjihgfedGEE\n`_^]\\[ZYX;99TSRQPONML/--H*FEDC&;$?>=<;:{2y6v4-t+0qo'&mkki'hf|{dbb``^^\\\n\\ZZXtsVkToQmfOdiLJ`_HFFDDBB@@>><XW:O8S5QPONML/D-HGFEDCBA$9\"=};4{27xv.-\ntrrp.om%$ki'hf|{db~a_ut][wZXnmVTpSQgfOMMKgJH^]FD`_^]@U>Y;WP9NS64JI200.\nJ-+A@)'C&$:9\"~~||z8yw/.ussq/pn&%lj('&%f{d!~}|{zyxwvY4srqTonmlkjMKK'edc\nba`_^A??ZYXWVUTSR533NMLKJIHGF)''BA@?>=<;:{yy6543210/.omm*)('&%$#\"caa|{\nzyxwvutWUUponmlkjihKIIdcba`_^]\\?==XWVUTSRQP311L.JIHG*?(CBA@?>!6}:z81x/\n4us+*qoom+lj\"!hffddbb``^^\\\\ZvuXmVqSohQfkNLbaJHHFbECYXA??==;;9977553ON1\nF/J,HGFEDC&;$?>=<;:98y0w4t2+r).om%$kiiggeec!b`vu^\\\\ZvYWmlUSSQmPNdcLJfe\ndcF[D_A]V?TY<:PO86644220L/-CB+))''%%#?\"~65|z8765v-t10/.-,+*)(iD%$#\"!~}\n|{zyxwvutsrqpoRmlkjihKII%pba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:987\n654RQ"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"mamba": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Gelbpunkt/mamba-lang",
		"name": "Mamba",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mariolang": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/tomsmeding/MarioLANG",
		"name": "MarioLANG",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+>+>)+)+)+++)++++((((-[!)>->.\n+\"+\"===================#+\".\")\n+++!((+++++++++)++++++)<.---+\n++=#===================\")---.\n++((.-(.)).+++..+++++++.<---\n !+======================---\n=#>++++++++++++++.).+++.-!>!\n  =======================#=#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mascarpone": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Mascarpone",
		"name": "Mascarpone",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "[!dlroW ,olleH]$............."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mathgolf": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/maxbergmark/mathgolf",
		"name": "MathGolf",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"mathematica": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.wolfram.com/wolframscript/",
		"name": "Wolfram Language (Mathematica)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-print"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"mathics": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://mathics.github.io/",
		"name": "Mathics",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print[\"Hello, World!\"]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "pip"
	},
	"matl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/lmendo/MATL",
		"name": "MATL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"maverick": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Maverick",
		"name": "Maverick",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "outc(32+40`69`76`76`79`12`0`55`79`82`76`68`1)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"maxima": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://maxima.sourceforge.net/",
		"name": "Maxima",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"maybelater": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/MaybeLater",
		"name": "MaybeLater",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"memory-gap": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/memory-GAP",
		"name": "Memory GAP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "3a5ec416fe2e59b56d099d2953d54ad6aabecb6088261a515c3e1d631d4998e8fc763cb31e9938f37737394681228f837062da7393ecc31c3c0564020f85efd1a64cf5823262686e1a28b2245be34ce07cef8a734855777c2a9d0caf42666e69c68271a63ddbc431c307beb7d291827574985f5115ad149212a917dbef8ec801"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"milambda": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/MiLambda",
		"name": "MiLambda",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ">  EEEEEEEΔΔΘς       v\nv  ςΘΔEEEEEEEEEE     <\n>  EEEEEEEEEEEδδΘς   v\nv  ΘδδEEEEEEEEEEEς   <\n>  ς EEEEEEEEEEEΔΘ   v\nv  ΘΔΔΔΔEEEEς        <\n>  ςEEEΔΔΘ           v\nv  ΘδEEEEEEEEEEEEς   <\n>  ςEEEEEEEEEEEΔΘ    v\nv  ΘΔΔΔΔEEEEEEEEEEEς <\n>  ςEEEEEEEEEEEδδΘ   v\nv  ΘEEEEEEEEEEς      <\n>  ςEEEΔΔΔΘ          λ"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "git"
	},
	"milky-way": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/zachgates/Milky-Way",
		"name": "Milky Way",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"minefriff": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/JonoCode9374/Minefriff",
		"name": "MineFriff",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Cff3,a*a,9*c,a*b4,a*b1,8*a7,ff2,ffe,a*b1,9*c,:a*a1,9*8,`\n>l?#;o~"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"minimal-2d": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Minimal-2D",
		"name": "Minimal-2D",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "--->->-> D\n D+>>+>+>L\nDD/+++<D/-<  L\n>R++++ R>+++D\n>D-->++++>  L\n>R>+++<<<- /UU\nR.>-->-.>..+>+D\nD>-->+.+++>+++L\nR>-.D\nU/<<L"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"miniml": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/feresum/acml",
		"name": "miniML",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "map putchar \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"minkolang": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/elendiastarman/Minkolang",
		"name": "Minkolang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"OOOOOOOOOOOOO."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mirror": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/mirror",
		"name": "Mirror",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"momema": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ScratchMan544/momema",
		"name": "Momema",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "-9 72-9 101-9 108-9 108-9 111-9 44-9 32-9 87-9 111-9 114-9 108-9 100-9 33"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"monkeys": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/monkeys",
		"name": "Monkeys",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "7 UP\n7 RIGHT\n7 RIGHT\n7 TEACH\n6 BOND\n4 RIGHT\n4 LEFT\n6 BOND\n6 BOND\n5 RIGHT\n5 LEFT\n5 RIGHT\n7 BOND\n7 TEACH\n7 TEACH\n4 TEACH\n4 TEACH\n6 YELL\n7 TEACH\n7 TEACH\n4 FIGHT\n5 TEACH\n6 YELL\n4 TEACH\n4 TEACH\n5 FIGHT\n6 YELL\n6 YELL\n4 TEACH\n5 FIGHT\n6 YELL\n7 EGO\n4 BOND\n7 TEACH\n4 TEACH\n6 YELL\n7 FIGHT\n4 TEACH\n6 YELL\n7 TEACH\n7 TEACH\n7 TEACH\n4 TEACH\n4 TEACH\n5 FIGHT\n6 YELL\n7 TEACH\n4 TEACH\n4 TEACH\n6 YELL\n4 TEACH\n5 FIGHT\n6 YELL\n4 FIGHT\n5 FIGHT\n5 FIGHT\n6 YELL\n4 FIGHT\n4 FIGHT\n6 YELL\n4 EGO\n4 TEACH\n4 TEACH\n6 YELL"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"moonscript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://moonscript.org",
		"name": "Moonscript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "lua"
	},
	"moorhens": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Wheatwizard/Moorhen/tree/v2.0-dev",
		"name": "Moorhens",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho\nho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho\nho ho ho ho ho ho ho ho ho ho ho ho aa\nho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho aa\nho ho ho ho ho ho ho aa aa\nho ho ho aa\naah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah\naah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah\naah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah\naah aah aah aah aah aah aah aa\naah aah aah aah aah aah aah aah aah aah aah aah aa\nho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho\nho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho aa\nho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho ho aa\nho ho ho aa\naah aah aah aah aah aah aa\naah aah aah aah aah aah aah aah aa\naah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah\naah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah\naah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah aah\naah aah aah aah aah aah aah"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-c"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mornington-crescent": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/padarom/esoterpret",
		"name": "Mornington Crescent",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Take Northern Line to Hendon Central\nTake Northern Line to Bank\nTake Northern Line to Bank\nTake District Line to Gunnersbury\nTake District Line to Victoria\nTake Victoria Line to Seven Sisters\nTake Victoria Line to Victoria\nTake Victoria Line to Victoria\nTake District Line to Bank\nTake District Line to Hammersmith\nTake District Line to Cannon Street\nTake District Line to Hammersmith\nTake District Line to Cannon Street\nTake District Line to Bank\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Acton Town\nTake Piccadilly Line to Holloway Road\nTake Piccadilly Line to Acton Town\nTake Piccadilly Line to Acton Town\nTake District Line to Gunnersbury\nTake District Line to Hammersmith\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Victoria\nTake Victoria Line to Seven Sisters\nTake Victoria Line to Victoria\nTake Victoria Line to Victoria\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Mile End\nTake District Line to Hammersmith\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Upminster\nTake District Line to Mile End\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Acton Town\nTake Piccadilly Line to Heathrow Terminals 1, 2, 3\nTake Piccadilly Line to Holborn\nTake Central Line to Holborn\nTake Central Line to Mile End\nTake District Line to Upminster\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Barking\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Barking\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Paddington\nTake Circle Line to Wood Lane\nTake Circle Line to Victoria\nTake Circle Line to Victoria\nTake District Line to Gunnersbury\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Mile End\nTake Central Line to Fairlop\nTake Central Line to Mile End\nTake District Line to Barking\nTake District Line to Upminster\nTake District Line to Upminster\nTake District Line to Hammersmith\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Mile End\nTake District Line to Gunnersbury\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Hammersmith\nTake District Line to Mile End\nTake District Line to Richmond\nTake District Line to Mile End\nTake District Line to Paddington\nTake District Line to Paddington\nTake District Line to Richmond\nTake District Line to Bank\nTake District Line to Hammersmith\nTake District Line to Upminster\nTake District Line to Stepney Green\nTake District Line to Hammersmith\nTake District Line to Stepney Green\nTake District Line to Upney\nTake District Line to Notting Hill Gate\nTake District Line to Notting Hill Gate\nTake District Line to Notting Hill Gate\nTake District Line to Upminster\nTake District Line to Upney\nTake District Line to Upminster\nTake District Line to Bank\nTake Circle Line to Bank\nTake Northern Line to Charing Cross\nTake Bakerloo Line to Charing Cross\nTake Bakerloo Line to Paddington\nTake Circle Line to Bank\nTake Circle Line to Bank\nTake Northern Line to Mornington Crescent"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mouse": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://mouse.davidgsimpson.com/mouse79/",
		"name": "Mouse-79",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World\" $"
						}
					}
				],
				"response": "Hello, World"
			}
		},
		"update": "git"
	},
	"mouse2002": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://mouse.davidgsimpson.com/mouse2002/",
		"name": "Mouse-2002",
		"piggyback": "mouse",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World\" '! !' $"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"mouse83": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://mouse.davidgsimpson.com/mouse83/",
		"name": "Mouse-83",
		"piggyback": "mouse",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World\" '! !' $"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"mu6": {
		"categories": [
			"recreational"
		],
		"encoding": "nibbles",
		"link": "https://github.com/bforte/mu6",
		"name": "µ6",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ",200,245,300,300,303,112,52,223,303,310,300,244,53"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-a"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"mumps": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://www.cs.uni.edu/~okane/",
		"name": "MUMPS",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "    write \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"muriel": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Muriel",
		"name": "Muriel",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"my": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bitbucket.org/zacharyjtaylor/my-language",
		"name": "MY",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "27á'←1Aá'←8Aá'2×←1Bá'←44á'←2Ġ'←78á'←1Bá'←4Bá'←8Aá'←AȦ'←33á'←"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"my-basic": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/paladin-t/my_basic",
		"name": "MY-BASIC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nameless": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/bforte/nameless-lang",
		"name": "nameless language",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "001001100011001100000011011000000000001000000011001100110011001100010001011100010011001100010011001100110111000000110100000000000000001001000000000001000100001000100010011001000000011100010001000100010100001000100010010000110011001100110011001101000001000100110100000000000000000000100100"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nandy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/EdgyNerd/Nandy",
		"name": "Nandy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "o::#o>oo>o>oooo>oo>oo>o>o>o>o>oo>o>oo>ooo>oo>o>oo>ooo>oo>o>oooo>oo>o>o>oo>oooo>o>oooooo>o>o>o>o>ooo>o>oo>o>oooo>o>ooo>oo>o>oo>oo>o>oo>ooo>oo>oo>o>oooo>o>oooo>o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nial": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/danlm/QNial7",
		"name": "Nial",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "write 'Hello, World!';"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nikud": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/bary12/Nikud",
		"name": "Nikud",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "אֱאֱאַאֶאֶאֶאֶאָאָאָאָאֱאַאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאֱאַאֶאֶאָאָאַאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאֱאַאֶאֶאֶאָאָאַאֱאֱאַאֱאֱאַאַאַאַאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאֱאַאֶאֶאֶאָאָאַאֱאַאַאֱאֱאַאֶאֶאֶאָאָאַאֶאַאֶאַאֶאַאֱאֱאַאֶאֶאָאָאֲאַאַאֱאֱאַאֶאֶאֶאֶאָאָאָאָאֱאֱאַאֶאֶאֶאָאָאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאָאַאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאֱאַאֶאֶאֶאָאָאַאֱאַאַאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאֱאַאֶאֶאָאָאַאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאֱאַאֶאֶאָאָאַאֱאֱאַאֶאֶאֶאָאָאַאֶאָאֱאַאֱאֱאַאֶאֶאֶאָאָאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאֶאֶאֶאָאָאַאַאֱאֱאַאַאֳאֳאֳאֳאֳאֳאֳאֳאֳאֳאֳאֳאֳ"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nim": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://nim-lang.org/",
		"name": "Nim",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"neim": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/okx-code/Neim",
		"name": "Neim",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!)B"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"neutrino": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/neutrino",
		"name": "Neutrino",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nhohnhehr": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Nhohnhehr",
		"name": "Nhohnhehr",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+-----------+\n|\\$010010000|\n|\\1100101011|\n|\\0110001101|\n|\\1000110111|\n|\\1001011000|\n|\\0100000010|\n|\\1011101101|\n|\\1110111001|\n|\\0011011000|\n|\\1100100001|\n|\\00001@    |\n+-----------+"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"no": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Uno-No",
		"name": "No",
		"piggyback": "uno",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "NOOOOOOOOOOOOOOO?Noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Noooooooooooooooooooooooooooooooooooooooooooo!Noooooooooooooooooooooooooooooooo!Nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo!Nooooooooooooooooooooooooooooooooo\nNOOOOOOOO?yes"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"noether": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/beta-decay/Noether",
		"name": "Noether",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"P"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"nqt": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/NotQuiteThere",
		"name": "NotQuiteThere",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'0"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ntfjc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/ntfjc",
		"name": "NTFJ (NTFJC)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "~#~~#~~~@*~##~~#~#@*~##~##~~@::**~##~####@:*~~#~##~~@*~~#~~~~~@*~#~#~###@**~###~~#~@**~##~~#~~@*~~#~~~~#@*"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"numberwang": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Numberwang_(brainfuck_derivative)",
		"name": "Numberwang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "69696969696969693696969623673363316969696968359533059595636969663633563583193"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"oasis": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Adriandmen/Oasis",
		"name": "Oasis",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"obcode": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://gitlab.com/TheWastl/ObCode",
		"name": "ObCode",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"oberon-07": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://miasap.se/obnc/",
		"name": "Oberon-07",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "MODULE M;\n\n\tIMPORT Out;\n\nBEGIN\n\tOut.String(\"Hello, World!\");\nEND M."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"object-pascal-fpc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://www.freepascal.org/",
		"name": "Object Pascal (FPC)",
		"prettify": "pascal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "begin\n\twrite('Hello, World!');\nend."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"objective-c-clang": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://clang.llvm.org/",
		"name": "Objective-C (clang)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n\treturn 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"objective-c-gcc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Objective-C.html",
		"name": "Objective-C (gcc)",
		"prettify": "c",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#include <stdio.h>\nint main() {\n\tputs(\"Hello, World!\");\n\treturn 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"occam-pi": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://projects.cs.kent.ac.uk/projects/kroc/trac/",
		"name": "occam-pi",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#INCLUDE \"course.module\"\nPROC hello (CHAN BYTE out!)\n  out.string (\"Hello, World!\", 0, out!)\n:"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"ocaml": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.ocaml.org/",
		"name": "OCaml",
		"prettify": "ml",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print_string \"Hello, World!\";;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"octave": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/octave/",
		"name": "Octave",
		"prettify": "matlab",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "disp(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"odin": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/odin-lang/Odin",
		"name": "Odin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "package main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\tfmt.print(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ohm": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/nickbclifford/Ohm/tree/v1",
		"name": "Ohm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ohm2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/nickbclifford/Ohm",
		"name": "Ohm v2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"oml": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/OML",
		"name": "OML",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"s"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ooocode": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "oOo CODE",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "OooOoooooOooooooooOoOoOoOoOoOooooOoOooOOooOooOooooOOooooOOooooOOooooooooooooOOooOoOOooooooOooOooOOooooOoOOoOOoOOoOOoOOoOOOoooooooOooOOoOOoooooooOOooooOoOOOoooOooOOOoooOooOOOooooooooooOOoOoOOoOOoOOOoooOooOOOoooOooOOooOOooooooooooOoOOOo"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"oration": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Assorted-Programming-Languages/tree/master/oration",
		"name": "Oration",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "literally, print(\"Hello, World!\")"
						}
					}
				],
				"response": "hello, world"
			}
		},
		"update": "git"
	},
	"ork": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/ork",
		"name": "ORK",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "When this program starts:\nThere is a scribe called TIO.\nTIO is to write \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"orst": {
		"categories": [
			"recreational"
		],
		"encoding": "it's complicated",
		"link": "https://github.com/cairdcoinheringaahing/Orst-Geo",
		"name": "Orst",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"BΡÁζŠ(ﬁ“"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"osabie": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Adriandmen/05AB1E",
		"name": "05AB1E",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"osh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.oilshell.org/",
		"name": "OSH",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"pain-flak": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Cis112233/Pain-Flak",
		"name": "Pain-Flak",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-A"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": ")))))}{}{)))}{))(}{((((])][][][([(])()()([((]][[()()()(])}{][][)][(][([())(]][][][][][[))(]][[)][][)][][][][))(}{}{))))(}{)}{)}{))()()()((((((((((((}><{"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"paradoc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/betaveros/paradoc",
		"name": "Paradoc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hw"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"parenthesis-hell": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/qpliu/esolang/tree/master/ph",
		"name": "Parenthesis Hell",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(()()(()()(()()()()((()()(()(()((()((()()()((()((()()()((()((((()()(()()()()()()(((()(((()((()((((()(((()()(()()((()((()()()((()()(()()()()(()()()()(()()()()(()(())))))))))))))))))))))))))))))))))))))))))))))))))"
						}
					}
				],
				"response": "Hello world!"
			}
		},
		"update": "git"
	},
	"parenthetic": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cammckinnon/Parenthetic",
		"name": "Parenthetic",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "((()(()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()))((()(())(())())((())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()())))"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pari-gp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://pari.math.u-bordeaux.fr/",
		"name": "Pari/GP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print1(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"pascal-fpc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://www.freepascal.org/",
		"name": "Pascal (FPC)",
		"prettify": "pascal",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "begin\n\twrite('Hello, World!');\nend."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"path": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://sourceforge.net/projects/pathlang/",
		"name": "PATH",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "$\\\n//\n\\++++++++++++++++++++++++++++++++\\\n/++++++++++++++++++++++++++++++++/\n\\++++++++.\\\n/}        /\n\\++++++++++++++++++++++++++++++++\\\n/++++++++++++++++++++++++++++++++/\n\\++++++++++++++++++++++++++++++++\\\n/                                /\n\\+++++.+++++++..+++.\\\n/}                  /\n\\++++++++++++++++++++++++++++++++\\\n/                                /\n\\++++++++++++.------------.\\\n/{{                        /\n\\+++++++++++++++.\\\n/}               /\n\\.+++.------.--------.\\\n/}                    /\n\\+.\\\n/  /\n#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"pbrain": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.parkscomputing.com/applications/pbrain/",
		"name": "pbrain",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++++++++++++++.------------.<<+++++++++++++++.>.+++.------.--------.>+.>."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"perl4": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.perl.org/",
		"name": "Perl 4",
		"prettify": "perl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "version"
	},
	"perl5": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.perl.org/",
		"name": "Perl 5",
		"prettify": "perl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"perl5-cperl": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://perl11.org/cperl/",
		"name": "Perl 5 (cperl)",
		"prettify": "perl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "no-version"
	},
	"perl6": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/nxadm/rakudo-pkg",
		"name": "Perl 6",
		"prettify": "perl6",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"perl6-niecza": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/sorear/niecza",
		"name": "Perl 6 (Niecza)",
		"prettify": "perl6",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"phoenix": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/senselogic/PHOENIX",
		"name": "Phoenix",
		"prettify": "php",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"phooey": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Phooey",
		"name": "Phooey",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"php": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://php.net/",
		"name": "PHP",
		"prettify": "php",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<?php\necho \"Hello, World!\";\n?>"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"physica": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Mr-Xcoder/Physica",
		"name": "Physica",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print@'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"picolisp": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://picolisp.com/",
		"name": "PicoLisp",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(prinl \"Hello, World!\")(bye)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"piet": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/cincodenada/bertnase_npiet",
		"name": "Piet",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0000000: 47 49 46 38 37 61 1c 00 03 00 84 14 00 ff 00 00  GIF87a..........\n0000010: 00 00 00 ff c0 c0 ff 00 00 c0 00 00 ff ff c0 ff  ................\n0000020: ff 00 c0 c0 00 c0 ff c0 00 ff 00 00 c0 00 c0 ff  ................\n0000030: ff 00 ff ff 00 c0 c0 c0 c0 ff 00 00 ff 00 00 c0  ................\n0000040: ff c0 ff ff 00 ff c0 00 c0 ff ff ff ff ff ff ff  ................\n0000050: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................\n0000060: ff ff ff ff ff ff ff ff ff ff ff ff ff 2c 00 00  .............,..\n0000070: 00 00 1c 00 03 00 00 05 3c e0 23 42 4a 73 24 c3  ........<.#BJs$.\n0000080: 23 39 ec 33 35 f0 02 39 d1 c2 3c 81 11 44 82 63  #9.35..9..<..D.c\n0000090: 2a 40 05 42 70 98 10 24 13 c1 44 f4 80 2c 17 0a  *@.Bp..$..D..,..\n00000a0: 43 21 32 a9 56 0f 0d 87 80 3a 39 20 1c 12 c3 20  C!2.V....:9 ...\n00000b0: 5c 28 17 72 21 00 3b                             \\(.r!.;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pike": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://pike.lysator.liu.se/",
		"name": "Pike",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "int main()\n{\n  write(\"Hello, World!\");\n  return 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pilot-pspilot": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/FreeTrav/psPILOT",
		"name": "PILOT (psPILOT)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "T: Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pilot-rpilot": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/pilot-rpilot",
		"name": "PILOT (RPilot)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "T: Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pingpong": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/graue/esofiles/tree/master/pingpong",
		"name": "PingPong",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "1-$!dlroW$ $,olleH#/<\\0@\n                   \\./"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pip": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/pip",
		"name": "Pip",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pixiedust": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/The-Snide-Sniper/pixiedust",
		"name": "Pixiedust",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++.*+..+...\n++.*++..+.+\n++.*++.++..\n++.*++.++..\n++.*++.++++\n++.*+.++..\n++.*+.....\n++.*+.+.+++\n++.*++.++++\n++.*+++..+.\n++.*++.++..\n++.*++..+..\n++.*+....+"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pl": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/quartata/pl-lang",
		"name": "pl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pony": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.ponylang.org/",
		"name": "Pony",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "actor Main\n  new create(env: Env) =>\n    env.out.print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"positron": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/positron",
		"name": "Positron",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print@\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"postl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/postfix-lang",
		"name": "PostL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"postscript-xpost": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/luser-dr00g/xpost",
		"name": "PostScript (xpost)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!) =\nquit"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"powershell": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/TioSetup/wiki/Powershell",
		"name": "PowerShell",
		"prettify": "powershell",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"powershell-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/PowerShell/PowerShell",
		"name": "PowerShell Core",
		"prettify": "powershell",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"prelude": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Prelude",
		"name": "Prelude",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "92480969393782833909095806(^+^+^^+++!)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"premier": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Premier",
		"name": "Premier",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\nHello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"preproc": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://gitlab.com/PavelBraginskiy/preproc",
		"name": "Preproc",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"prolog-ciao": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://ciao-lang.org",
		"name": "Prolog (Ciao)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main :-\n     write('Hello, World!')."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "version"
	},
	"prolog-swi": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.swi-prolog.org",
		"name": "Prolog (SWI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "?-write('Hello, World!')."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"proton": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/proton",
		"name": "Proton",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"proton2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/proton-2.0",
		"name": "Proton 2.0",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"ps-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/p-org/PSharp",
		"name": "P#",
		"prettify": "cs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using System;\nusing Microsoft.PSharp;\n\nnamespace CoreApp\n{\n\tpublic class Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tvar runtime = PSharpRuntime.Create();\n\t\t\tConsole.WriteLine(\"Hello, World!\");\n\t\t}\n\n\n\t}\n\n\n\tpublic class M : Machine\n\t{\n\t\t[Start]\n\t\t[OnEntry(nameof(InitOnEntry))]\n\t\tclass Init : MachineState { }\n\n\n\t\tvoid InitOnEntry()\n\t\t{\n\t\t\tthis.Assert(false);\n\t\t}\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dotnet"
	},
	"pure": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/agraef/pure-lang",
		"name": "Pure",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "using system;\nputs \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"purescript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.purescript.org/",
		"name": "PureScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "module Main where\n\nimport Prelude (Unit)\nimport Effect\nimport Effect.Console (log)\n\nmain :: Effect Unit\nmain = do\n  log \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"purple": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Purple",
		"name": "Purple",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "AA1AA1AA1bA1b1Bo1bb1bbibb1Bi1b     \n ! d l r o W   , o l l e H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pushy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/FTcode/Pushy",
		"name": "Pushy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`Hello, World!`\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"puzzlang": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/AndoDaan/EsotericLanguages/blob/master/Puzzlang/InPuzzlang.lua",
		"name": "Puzzlang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": " X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n X\nX\n\n X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n X\nX\n\n X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n X\n X\nX\n\n X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n X\n  X\n   X\n    X XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n    X\n\n    X XXXXXXXXXXX\n    X\n   X\n\n   X XXXXXXXXXXXXX\n   X\n  X\n X\n X\nX\n\nX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nX\n X\n  X\n  X\n\nX XXXXXXX\nX\n X\n\nX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nX\n\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyke": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/muddyfish/PYKE",
		"name": "Pyke",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pylons": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/morganthrapp/Pylons-lang",
		"name": "Pylons",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"c"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyn-tree": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alexander-liao/pyn-tree",
		"name": "PynTree",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "P\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/alexander-liao/pyon",
		"name": "Pyon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyramid-scheme": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Pyramid-Scheme",
		"name": "Pyramid Scheme",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "  ^      ^      ^     ^      ^      ^      ^      ^      ^      ^      ^      ^      ^\n / \\    / \\    / \\   / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\\n/out\\  /out\\  /out\\ /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\  /out\\\n-----^ -----^ -----^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^-----\n    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\\n   /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\  /chr\\\n  ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^----- ^-----\n / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\    / \\\n/72 \\  /101\\  /108\\  /111\\  /44 \\  /32 \\  /87 \\  /111\\  /114\\  /108\\  /100\\  /33 \\\n-----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyret": {
		"categories": [
			"unlisted"
		],
		"encoding": "UTF-8",
		"link": "https://www.pyret.org/",
		"name": "Pyret",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\\n\")"
						}
					}
				],
				"response": "Hello, World!\nThe program didn't define any tests."
			}
		},
		"unmask": [
			"options"
		],
		"update": "npm"
	},
	"pyt": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/mudkip201/pyt",
		"name": "Pyt",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "89*9⁺²⁺Đ7+ĐĐ3+7²5-2⁵9²6+6²⁺3*Đ3+Đ6-9⁺²2⁵⁺áƇǰ"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"pyth": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/isaacg1/pyth",
		"name": "Pyth",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".\" r\u0003vÅÎª{1å"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"python1": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.python.org/download/releases/1.6.1/",
		"name": "Python 1",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python2": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://docs.python.org/2/",
		"name": "Python 2",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python2-cython": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cython.org/",
		"name": "Python 2 (Cython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"python2-iron": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://ironpython.net",
		"name": "Python 2 (IronPython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"python2-jython": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.jython.org",
		"name": "Python 2 (Jython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"python2-pypy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://pypy.org/",
		"name": "Python 2 (PyPy)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python3": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://docs.python.org/3/",
		"name": "Python 3",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python38pr": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://docs.python.org/3.8/",
		"name": "Python 3.8 (pre-release)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python3-cython": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://cython.org/",
		"name": "Python 3 (Cython)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"python3-pypy": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://pypy.org/",
		"name": "Python 3 (PyPy)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"python3-stackless": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stackless-dev/stackless",
		"name": "Python 3 (Stackless)",
		"prettify": "python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"qqq": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ararslan/qqq-lang",
		"name": "???",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ",;;..;...;.;,,,,;,,\"......\";...........-,'\",-.\";;,,,,!;...!;,!!...!;;;!-!-!-!...!,,,,,,!-,!;;;.!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"qs-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://docs.microsoft.com/en-us/quantum/quantum-qr-intro?view=qsharp-preview",
		"name": "Q#",
		"prettify": "fs",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_DRIVER": [
								"using System;\nusing Microsoft.Quantum.Simulation.Simulators;",
								"namespace qsharp\n{\n\tpublic class Driver\n\t{\n\t\tpublic static void Main(string[] args)\n\t\t{\n\t\t\tHello.Run(new QuantumSimulator()).Wait();\n\t\t}\n\t}\n}"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "namespace qsharp\n{\n\topen Microsoft.Quantum.Intrinsic;\n\topen Microsoft.Quantum.Canon;\n\n\tfunction Hello () : Unit\n\t{\n\t\tMessage(\"Hello, World!\");\n\t}\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"driver"
		],
		"update": "git"
	},
	"quadr": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/abrudz/QuadRS",
		"name": "QuadR",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"quadrefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Quadrefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"quads": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/abrudz/QuadRS",
		"name": "QuadS",
		"piggyback": "quadr",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"quarterstaff": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Destructible-Watermelon/Quarterstaff",
		"name": "Quarterstaff",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72!108>a101!a!a!3a!44!32!87!a3!a6!a!100!33!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"quintefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Quintefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"r": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.r-project.org/",
		"name": "R",
		"prettify": "r",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "cat(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"racket": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://racket-lang.org/",
		"name": "Racket",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#lang racket/base\n(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"rad": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://bitbucket.org/zacharyjtaylor/rad",
		"name": "RAD",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rail": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Rail",
		"name": "Rail",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "$'main'\n -[Hello, World!]o#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"random-brainfuck": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "Random Brainfuck",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+[?]--<-<<+[+[<+>--->->->-<<<]>]<<--.<++++++.<<-..<<.<+.>>.>>.<<<.+++.>>.>>-.<<<+."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"rapira": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/freeduke33/rerap2",
		"name": "Rapira",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "output: \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"re-direction": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Re:direction",
		"name": "Re:direction",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "V",
						"payload": {
							"TIO_OPTIONS": [
								"-A"
							]
						}
					},
					{
						"command": "F",
						"payload": {
							".code.tio": "◄             ▼\n             ♦♦◄\n              ▲\n            ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n           ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n          ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n         ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n        ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n       ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n      ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n     ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n    ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n   ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n  ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n ▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n▼►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►►\n◄"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "no-version"
	},
	"reason": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://reasonml.github.io",
		"name": "Reason",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" |> Js.log;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "npm"
	},
	"rebol": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.rebol.com/",
		"name": "REBOL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "REBOL[]\nprint \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"rebol3": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.rebol.com/rebol3/",
		"name": "REBOL 3",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "REBOL[]\nprint \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"recursiva": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/officialaimm/recursiva",
		"name": "Recursiva",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "P\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"red": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.red-lang.org",
		"name": "Red",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Red []\n\nprint \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"reng": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Reng",
		"name": "Reng",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"rao;~"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"reregex": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/ReRegex",
		"name": "ReRegex",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"res": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/A-ee/res",
		"name": "res",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "!dlroW ,olleH"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"resplicate": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/ResPlicate",
		"name": "ResPlicate",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0 72 0 101 0 108 0 108 0 111 0 44 0 32 0 87 0 111 0 114 0 108 0 100 0 33"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-i"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"reticular": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/reticular",
		"name": "Reticular",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"p;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"retina": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/m-ender/retina/wiki/The-Language/a950ad7d925ec9316e3e2fb2cf5d49fd15d23e3d",
		"name": "Retina 0.8.2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\nHello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"retina1": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/m-ender/retina/wiki/The-Language",
		"name": "Retina",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "K`Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"return": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/return",
		"name": "RETURN",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(())(())(())(())(())(())(())(())\n(()()()()()()()()()()()()()()()()())\n(\n  (()()()()())\n  ((())(())(())(())(())(())(())(())(())())\n  (()()()()())\n  ((())(())(())(()))\n  (()()()()())\n  (\n   (())(())(())(())(())\n   (())(())(())(())(())\n   (())(())(())()\n  )\n  (\n   (()()()()()()())\n   (()()()()()()())\n   (()()()()()()())\n  )\n)\n(()()()()())\n(()()()()()()()()())\n((()()()()())(()()()()())())\n(\n (()()())\n (()()())\n ()()()()()()()\n)\n(((((((())))))))\n(()()()()()()()()())\n(()()()()()()()()())\n(((())))\n(()()()()()()()()())\n(()()()()()()())\n(()()()()()()()()())\n(()()()()()()())\n(((((((((((((((())))))))))))))))\n(()()()()()()()()())\n((()()()()())(()()()()())()()()()()()())\n((((())))()()()()()()()())\n(\n (()()())\n (()()())\n (()()())\n)(\n (()()())\n (()()())\n ()()()()()()()\n)\n((\n  (()()())\n  (()()())\n  (()()())\n )(\n  (()()())\n  (()()())\n  (()()())\n )()()()()()()())\n((()()()()()()())(())()()()()()()())"
						}
					}
				],
				"response": "Hello World!"
			}
		},
		"update": "git"
	},
	"rexx": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.rexx.org/",
		"name": "Rexx (Regina)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"ring": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ring-lang/ring",
		"name": "Ring",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "see \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rk": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/rk-lang",
		"name": "rk",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "rk:start\n    print: \"Hello, World!\"\nrk:end"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rockstar": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/yanorestes/rockstar-py",
		"name": "Rockstar",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Say \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "pip"
	},
	"roda": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fergusq/roda",
		"name": "Röda",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main{print\"Hello, World!\"}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "github-release"
	},
	"roop": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/alejandrocoria/ROOP",
		"name": "ROOP",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"\nh"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ropy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/ropy",
		"name": "Ropy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "33&>76&+>8+>6+>3<->42&<->55&<->21&+>76&+>3<->0+>7<->92&<-\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"rotor": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/quartata/rotor-lang",
		"name": "Rotor",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rprogn": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/Reverse-Programmer-Notation",
		"name": "RProgN",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rprogn-2": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TehFlaminTaco/RProgN-2",
		"name": "RProgN 2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ruby": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.ruby-lang.org/",
		"name": "Ruby",
		"prettify": "ruby",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"runic": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Draco18s/RunicEnchantments/tree/Console",
		"name": "Runic Enchantments",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ">\"Hello, World!\"$;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"rust": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.rust-lang.org/",
		"name": "Rust",
		"prettify": "rust",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "fn main() {\n\tprintln!(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"rutger": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Rutger",
		"name": "Rutger",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Print[\"Hello, World!\"];"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sad-flak": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Destructible-Watermelon/Sad-Flak",
		"name": "Sad-Flak",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "32\n({}≤()≥)\n(≤()≥)\n99\n({}≤()≥)\n((<>[≤()≥]))\n7\n({}≤()≥)\n((<>))≤()≥\n5\n({}≤()≥)\n(≤()≥)\n109\n({}≤()≥)\n(<>)(≤()≥)\n85\n({}≤()≥)\n(≤()≥)\n30\n({}≤()≥)\n(≤()≥)\n42\n({}≤()≥)\n({≤()≥})(({()}))({()})(())\n70\n({}≤()≥)\n≤≥"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-A"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sakura": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/sakura",
		"name": "Sakura",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sbf": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/KelsonBall/Esolangs.Sbf",
		"name": "Symbolic Brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "▲²²²▲²²²¡½½½▲▲▲²▲²²▲¡½▲▲▲▲²¡¡▲▲▲¡α▲²²▲²▲²²¡ß▲²²²²²¡ß²▼¡α¡▲▲▲¡½▼▼▼²¡½½▼▼²²¡ß▲¡"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"scala": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.scala-lang.org/",
		"name": "Scala",
		"prettify": "scala",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "object Main extends App{print(\"Hello, World!\")}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"scheme-chez": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://cisco.github.io/ChezScheme/",
		"name": "Chez Scheme",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"scheme-chicken": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.call-cc.org/",
		"name": "CHICKEN Scheme",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"scheme-gambit": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://gambitscheme.org",
		"name": "Gambit Scheme (gsi)",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"scheme-guile": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/guile/",
		"name": "Guile",
		"prettify": "scm",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(display \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"sed": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/sed/",
		"name": "sed 4.2.2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "s/.*/Hello, World!/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"sed-gnu": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.gnu.org/software/sed/",
		"name": "sed",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "s/.*/Hello, World!/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"seed": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/seed",
		"name": "Seed",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "20 854872453003476740699221564322673731945828554947586276010721089172712854441839676581917455319274850944955030258951339804246125714958815519550291630078076933441706558540342671975808828643360922071900333028778314875248417953197990571991784126564752005357199892690656368640420204822142316716413192024742766282266114842280731756458212469988291309261528542889299297601723286769284159107438930448971911102280330101196758384815655479640836157495863547199726234352265518586460633795171196315255736880028338460236768181141732764911402112878175632130129852788301009582463631290071329795384336617491655825493435803011947670180368458659271192428341035912236946048939139042310380278430049252171822721598175984923434205610723412240162418996808671543770639111617709604242882388664919702606792443015941265168129550718541372361144081848761690730764968771245566074501485020726368378675085908872608679630368472956274468410052703615106090238423979678950131481176272880569100533049143775921798055136871254424261001442543122666701145111965968366507060931708140304772342855064834334129143038575569044150428480231956133612367393837580345180691911525531699573096952433882387811884727975431823620782822755161559988205401134640722220804177812794328129589949692446031008866917615922944976151073653201316255518389496411696741029209242119521978920200314572718584995265523235225587228975886710511855501710470163649632761488899317729943053884132314641377747687975638119132094777769497069556255954031537245957811105217875011509899497752696062748928963281605780942517262774976217663461063680912331030221981433051827519906741285738915397005702326447635845195923640649166530310494885569783989508000344280715868581532826832242144647203531393142251025361866506821695860883605004105862208004440476654027574832078603305884731766236740069411566854496824754558761536201352147934963241039597221404341132342297870517293237489233057335406510464277610336142382379135365550299895416613763920950687921780736585299310706573253951966294045814905727514141733220565108490291792987304210662448111170752411153136765318541264632854767660676223663544921028492602135525959428999005153729028491208277493747933069008199074925710651071766675870081314909460661981433426167330215548196538791617762566403934129026219366764038390123622134753742930729751695349588862441999672547791630729398908283091638866715502470152431589429837867944760012419885615525232399584379209285060418518373512154801760060312646951597932345591416241634668119867158079946680321131213357200382937049485606706114467095019612014749723443159443363662563254359712162432143334612180576945072905749883870150120687696027984317320305291407322779803583395375616762530641605634303022155218169343410634115050596030685041633824154135240376022159918501703555881290333205131375705406831260759974112248490451605422031345264183102048614606636275942039438138959188478277971377232005036301145411215067576576667743288951344423152531417111852584846747428443123174595987315325304540564683047858415059703724263652136185848573853965992798725654430360647040362341567082462847275277303225817689141675391972818943419663764371222973269129542760661385278009266471167618553065823580448848795731295589715602705860758954890415040763604082216728159486423396295188510311881004469017351709060492844398219491990895826924575575549615118821417543037296628825303328056839433114519945243963946989899508355224823109677424196639930153649890175062456649384605721510239142861693109687536600667811037619175927995599388547421689316110236566026931360164495251160997857372500940728057700473763884480342708897319990346726967220426504612260565552531158509215849649565188655100774748485416791517853427613458459889062942881409801879085054494129489535044719193283409051007851153504224002807392992520076910314763705776345053922387355156981872691537772657428096384535960466923475731297217863371650154415835785630016335858514130863258775100537612371430357576913148500310344278511588325852376442503898849856566716198848377379400158332792027967216204970114516984638014129252882482309132898416484525230488700253065644547798869056136044415413099076332059572505138116227535024546891015836838323022822272664771489129085797354578016574544759934333471793"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"septefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Septefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"seriously": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Mego/Seriously/tree/v1",
		"name": "Seriously",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sesos": {
		"categories": [
			"recreational"
		],
		"encoding": "it's complicated",
		"link": "https://github.com/DennisMitchell/sesos",
		"name": "Sesos",
		"prettify": "lisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "add 72\nput\nfwd 1\nadd 101\nput\nadd 7\nput\nput\nadd 3\nput\nfwd 1\nadd 44\nput\nsub 12\nput\nrwd 2\nadd 15\nput\nfwd 1\nput\nadd 3\nput\nsub 6\nput\nsub 8\nput\nfwd 1\nadd 1\nput"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"set": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/somebody1234/Set",
		"name": "Set",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "set ! H\nset ! 101\nset ! 108\nset ! 108\nset ! 111\nset ! 44\nset ! 32\nset ! W\nset ! 111\nset ! 114\nset ! 108\nset ! 100\nset ! 33"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sexefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Sexefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"sfk": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://stahlworks.com/dev/swiss-file-knife.html",
		"name": "sfk",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "no-version"
	},
	"shapescript": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/DennisMitchell/shapescript",
		"name": "ShapeScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"shnap": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ShnapLang/Shnap",
		"name": "Shnap",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "println(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "github-release"
	},
	"shortc": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/shortC",
		"name": "shortC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "AJ\"Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"shove": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/shove",
		"name": "Shove",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\" ,olleH\"V       v\n S\"!dlroW\"<"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"shp": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/shp",
		"name": ";#+",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ";;;;;;;;;~++++++++>#<+++;;:>#<+-;;>#<#<-;;;>#<-+++++++;;;;-:>#<-+;;;#::<;;;-++#:<#<;;;#-<;;;#<+;;#-:<-+;;#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"shtriped": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/HelkaHomba/shtriped",
		"name": "Shtriped",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "e n\ne b\ni b\n+ x y\n +\n  i x\n  d y\n  +\n +\n d x\n0\n + b b b\n1\n + b n n\n 0\nz x\n d x\n z x\nD\n 1\n s n\n z n n\n z b b\n i b\nY\n 0\n 0\nZ\n 1\n Y\n Y\nB\n 0\n 1\n1\nZ\n1\nY\n1\nY\nD\nB\nB\n1\n0\nZ\nY\nD\nB\n1\nY\nB\n0\nZ\nD\n1\nB\nB\nY\n1\n0\nD\nY\n1\n1\nY\nB\nZ\nD\nB\nY\n1\n0\nZ\nY\nD\nB\n1\n1\n1\n1\nB\n0\nD"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"silos": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/rjhunjhunwala/S.I.L.O.S",
		"name": "S.I.L.O.S",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sidef": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/trizen/sidef",
		"name": "Sidef",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"silberjoder": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/quintopia/Silberjoder",
		"name": "Silberjoder",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<=bC[<.-Cb]=iA\n!dlroW ,olleH\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"simplefunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/simplefunge",
		"name": "Simplefunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "89*O5!+!*1+O7+OO3+O&47*&-O34*&-O9!*6+O`&O3+O6&-O8&-O`1+O@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"simplestack": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/Implicit",
		"name": "Implicit",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "«Hello, World!»"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"simplex": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Simplex",
		"name": "Simplex",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"H"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"simula": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://directory.fsf.org/wiki/Cim",
		"name": "Simula (cim)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Begin\n\tOutText (\"Hello, World!\");\n\tOutimage;\nEnd;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"sisal": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/sisalc",
		"name": "SISAL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "define main\n\nfunction main(returns array[character])\n\t\"Hello, World!\"\nend function"
						}
					}
				],
				"response": "\"Hello, World!\""
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"sisi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/Esolangs/tree/master/Sisi",
		"name": "Sisi",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "10 print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"slashes": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki////",
		"name": "///",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"smbf": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://soulsphere.org/hacks/smbf/",
		"name": "Self-modifying Brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<[.<----------]\n+nv|ya*6yvvoH"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"sml-mlton": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mlton.org/",
		"name": "Standard ML (MLton)",
		"prettify": "ml",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\";"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"smol": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/smol",
		"name": "smol",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!';."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"snails": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/feresum/PMA",
		"name": "Snails",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\p|\\P)z(\\a|\\A)z{\\n|\\N)z{\\a|\\A}z(\\m|\\M)z(\\a|\\A"
						}
					},
					{
						"command": "F",
						"payload": {
							".input.tio": "EmYPhNuy\nAaaKVsjL\nonlGviCw\nDdOgFrRn\nISeHZmqc\nzMUkBGJQ"
						}
					}
				],
				"response": "1"
			}
		},
		"update": "git"
	},
	"snobol4": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "http://www.snobol4.org/csnobol4/",
		"name": "SNOBOL4 (CSNOBOL4)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "BEGIN\n\tOUTPUT = 'Hello, World!'\nEND"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"snowman": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://github.com/KeyboardFire/snowman-lang",
		"name": "Snowman",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(\"Hello, World!\"sP"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"snusp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/snusp",
		"name": "SNUSP (Modular)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "      /@@@@++++#               #+++@@\\\n$@\\H.@/e.+++++++l.l.+++o.>>++++.< .<@/--------------------------------w.++++++++++++++++++++++++++++++++@\\o.+++r.++@\\l.@\\d.>+.@/.#\n  \\@@@@=>++++>+++++<<@+++++#                                                                       #---@@/!=========/!==/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"snusp-bloated": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/Bloated-SNUSP",
		"name": "SNUSP (Bloated)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "      /@@@@++++#               #+++@@\\\n$@\\H.@/e.+++++++l.l.+++o.>>++++.< .<@/--------------------------------w.++++++++++++++++++++++++++++++++@\\o.+++r.++@\\l.@\\d.>+.@/.#\n  \\@@@@=>++++>+++++<<@+++++#                                                                       #---@@/!=========/!==/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"snuspi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/graue/esofiles/tree/master/snusp",
		"name": "SNUSP (Snuspi)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "72+.29+.7+..3+.67-.12-.55+.24+.3+.6-.8-.67-.#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"somme": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Somme",
		"name": "Somme",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "8s+vi:7+::J:^B4*25p9s6+v:J:6-:8-25pim,"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"spaced": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/spaced",
		"name": "Spaced",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(q=\"Helo, Wrd!\")[1]+q[3]+q[5]+q[5]+q[7]+q[9]+q[9+2]+q[9+4]+q[7]+q[9+6]+q[5]+q[9+8]+q[9+9+1]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"spim": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/spim",
		"name": "Assembly (MIPS, SPIM)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\t.data\nmsg:\n\t.asciiz \"Hello, World!\"\n\n\n\t.text\nmain:\n\tli $v0, 4\n\tla $a0, msg\n\tsyscall\n\tli $v0, 10\n\tsyscall"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"spl": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/spl",
		"name": "Shakespeare Programming Language",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "The Infamous Hello World Program.\n\nRomeo, a young man with a remarkable patience.\nJuliet, a likewise young woman of remarkable grace.\nOphelia, a remarkable woman much in dispute with Hamlet.\nHamlet, the flatterer of Andersen Insulting A/S.\n\n\n                    Act I: Hamlet's insults and flattery.\n\n                    Scene I: The insulting of Romeo.\n\n[Enter Hamlet and Romeo]\n\nHamlet:\n You lying stupid fatherless big smelly half-witted coward!\n You are as stupid as the difference between a handsome rich brave\n hero and thyself! Speak your mind!\n\n You are as brave as the sum of your fat little stuffed misused dusty\n old rotten codpiece and a beautiful fair warm peaceful sunny summer's\n day. You are as healthy as the difference between the sum of the\n sweetest reddest rose and my father and yourself! Speak your mind!\n\n You are as cowardly as the sum of yourself and the difference\n between a big mighty proud kingdom and a horse. Speak your mind.\n\n Speak your mind!\n\n[Exit Romeo]\n\n                    Scene II: The praising of Juliet.\n\n[Enter Juliet]\n\nHamlet:\n Thou art as sweet as the sum of the sum of Romeo and his horse and his\n black cat! Speak thy mind!\n\n[Exit Juliet]\n\n                    Scene III: The praising of Ophelia.\n\n[Enter Ophelia]\n\nHamlet:\n\n Thou art as beautiful as the difference between Romeo and the square\n of a huge green peaceful tree. Speak thy mind!\n\n Thou art as lovely as the product of a large rural town and my amazing\n bottomless embroidered purse. Speak thy mind!\n\n Thou art as loving as the product of the bluest clearest sweetest sky\n and the sum of a squirrel and a white horse. Thou art as beautiful as\n the difference between Juliet and thyself. Speak thy mind!\n\n[Exeunt Ophelia and Hamlet]\n\n\n                    Act II: Behind Hamlet's back.\n\n                    Scene I: Romeo and Juliet's conversation.\n\n[Enter Romeo and Juliet]\n\nRomeo:\n Speak your mind. You are as worried as the sum of yourself and the\n difference between my small smooth hamster and my nose. Speak your\n mind!\n\nJuliet:\n Speak YOUR mind! You are as bad as Hamlet! You are as small as the\n difference between the square of the difference between my little pony\n and your big hairy hound and the cube of your sorry little\n codpiece. Speak your mind!\n\n[Exit Romeo]\n\n                    Scene II: Juliet and Ophelia's conversation.\n\n[Enter Ophelia]\n\nJuliet:\n Thou art as good as the quotient between Romeo and the sum of a small\n furry animal and a leech. Speak your mind!\n\nOphelia:\n Thou art as disgusting as the quotient between Romeo and twice the\n difference between a mistletoe and an oozing infected blister! Speak\n your mind!\n\n[Exeunt]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"spoon": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/spoon",
		"name": "Spoon",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0101111111110010001111111111010000001101100101001011111110010001111110\n1000000110111001010111111100101000101011100101001011111111111001000110\n0000000000000000001000000110110000010100000000000000000000000000000000\n0000000101001011111111111001000111111101000000110110010100101111110010\n0011111101000000110110010101110010100000000000000000000010100000000000\n0000000000000000101001011111111111001000110000000000000000000100000011\n011000001010"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sqlite": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.sqlite.org/",
		"name": "SQLite",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "select 'Hello, World!';"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"squirrel": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.squirrel-lang.org/",
		"name": "Squirrel",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\");"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"stackcats": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/stackcats",
		"name": "Stack Cats",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "-*(:^-_-_:-_:-_:-_:-_-_:[:^]]:^!-*!->[!_>[!_>[{]>[^-_-_:]]<<<}>[!-:^[[\\\\>]:^[[>:[>:^[<<]]\\\\>[*>+:^:-_]:^[[-_*[>>>[-_[/<]>+^[>[<<]]*>[)"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-l"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"stacked": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/stacked",
		"name": "Stacked",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'Hello, World!' out"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"starfish": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/redstarcoder/go-starfish",
		"name": "*><>",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"r>Ool?u!|;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "no-version"
	},
	"starry": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Starry",
		"name": "Starry",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "        + + +* +  * + + +* + .* +         + +* * +      +* .  + + . + . +        + +   +* + . +          +   * +* + .         + +  * +* . +*      + * . + .* . . .  + * ."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"stax": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/tomtheisen/stax",
		"name": "Stax",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "èï┬▀↨╩4G"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"stencil": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/abrudz/Stencil",
		"name": "Stencil",
		"prettify": "apl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "S"
						}
					},
					{
						"command": "F",
						"payload": {
							".input.tio": "Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"stones": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cheezgi/stones",
		"name": "Stones",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "red down three\nred up three\nyellow up\nblue left\nred down two\ngreen down\nyellow down\ngreen down\nyellow up\ngreen down\ngreen down\nred down one\nyellow down\nblue left\nred up three\nyellow down\ngreen down\ngreen down\ngreen down\nblue left\nblue left\nred right one\nyellow down\nblue left\nred up three\nred up two\nyellow up\ngreen down\ngreen down\nred left two\nred left two\nyellow down\nyellow down\nblue left\nblue left\nred down three\nred down three\nyellow up\nred left two\nyellow down\nblue left\nblue right\ngreen down\nred right one\nyellow down\ngreen down\nblue left\nred right one\nyellow down\nblue left\nblue left\nred down one\nyellow down\nblue right\nblue left\nblue left"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"str": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/str",
		"name": "str",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`Hello, World!`o;"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"straw": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/straw",
		"name": "Straw",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "->"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"subskin": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/subskin",
		"name": "Subskin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "2\n48\n17\na\n1\n2\n4\n2\na\n6\n0\n100\n21\n64\n6c\n72\n6f\n57\n20\n2c\n6f\n6c\n6c\n65"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"sumerian": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/beta-decay/Sumerian",
		"name": "Sumerian",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "𒁺(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"supermariolang": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/charliealejo/SuperMarioLang",
		"name": "SuperMarioLang",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "+>+>)+)+)+++)++++((((-[!)>->.\n+\"+\"===================#+\".\")\n+++!((+++++++++)++++++)<.---+\n++=#===================\")---.\n++((.-(.)).+++..+++++++.<---\n !+======================---\n=#>++++++++++++++.).+++.-!>!\n  =======================#=#"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"superstack": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/superstack",
		"name": "Super Stack!",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0 33 100 108 114 111 87 32 44 111 108 108 101 72\nif outputascii fi"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"surface": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/surface",
		"name": "Surface",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++(-v        .     o]v    \n   -      e++++v   !     ^ v    \n   -           e+++++++++^ x    \n   -     e+++++++++o   v-(e.    \n   -     e+++++++++o   +  ^o    \n   -               +v]ev        \n   e----------o    +- ^+        \n   e----------o    +- ^o        \n+++.v              +e-.+++++++..\n-.^!+              +e-----------\n  oo+              +.e+.@       \n.--o+              .+v .--------\n   -+              ++           \n   -+              ++           \n   -+              ++           \n   -+              .+"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"swap": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/splcurran/Swap",
		"name": "Swap",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"ooooooooooooox"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"swift4": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://developer.apple.com/swift/",
		"name": "Swift",
		"prettify": "swift",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"syms": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/CatsAreFluffy/syms",
		"name": "Syms",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "{Hello, World!}>"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"symbolic-python": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/FTcode/Symbolic-Python",
		"name": "Symbolic Python",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "___=`_`[_==_]\n_=_!=_\n__=`_`[-~(_==_)]\n_=_==_\n____='%'+`'¬'`[-_-_]\n____=____+`_`[-_]+__*-~_+___+', '+____+___+`_`[_]+__\n_+=_\n__=_+_**-~_\n___=__**_\n____+=____[:_]%(___)+'!'\n_=_*_*_-([]==[])\n_=____%(-~-~(_*__),-~_*__+_)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"taco": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/TacO",
		"name": "TacO",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tampio": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fergusq/tampio/tree/functional",
		"name": "Tampio (functional)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "tulos on HelloWorld"
						}
					}
				],
				"response": "HelloWorld"
			}
		},
		"update": "git"
	},
	"tampioi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/fergusq/tampio",
		"name": "Tampio (imperative)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Kun aloitetaan, tulostetaan teksti \"Hello, World!\"."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tamsin": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/catseye/Tamsin",
		"name": "Tamsin",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main='Hello, World!'."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tapebagel": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/tapebagel",
		"name": "TapeBagel",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"taxi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bigzaphod.github.io/Taxi/",
		"name": "Taxi",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\" is waiting at the Writer's Depot.\nGo to Writer's Depot: west 1st left, 2nd right, 1st left, 2nd left.\nPickup a passenger going to the Post Office.\nGo to the Post Office: north 1st right, 2nd right, 1st left.\nGo to the Taxi Garage: north 1st right, 1st left, 1st right."
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tcl": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://tcl.tk/",
		"name": "Tcl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "puts Hello,\\ World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"tcsh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.tcsh.org/",
		"name": "tcsh",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo 'Hello, World!'"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"templat": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Attache/blob/master/TemplAt.md",
		"name": "TemplAt",
		"piggyback": "attache",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "<attache>\nPrint[\"Hello, World!\"]\nExit[]\n</attache>"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"templates": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/feresum/tmp-lang",
		"name": "Templates Considered Harmful",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "St<72,'e','l','l','o',44,32,87,'o',114,'l','d',33>"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"thing": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://gitlab.com/gnu-nobody/Thinglang",
		"name": "Thing",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\!\\d\\l\\r\\o\\W48*c\\,\\o\\ld\\e\\H++++++++++++"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"threead": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TehFlaminTaco/Threead",
		"name": "Threead",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\"o"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"thue": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://esolangs.org/wiki/Thue",
		"name": "Thue",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "a::=~Hello, World!\n::=\na\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"thutu": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Thutu",
		"name": "Thutu",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "/^=1$/Hello, World!=n=x=9/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tidy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/Tidy",
		"name": "Tidy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "write(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tincan": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/tincan",
		"name": "TinCan",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "#  -72, Z, -1                          #\n# -101, Y, -1                          #\n# -108, X, -1                          #\n# -108, W, -1                          #\n# -111, V, -1                          #\n#  -44, U, -1                          #\n#  -32, T, -1                          #\n#  -87, S, -1                          #\n# -111, R, -1                          #\n# -114, Q, -1                          #\n# -108, P, -1                          #\n# -100, O, -1                          #\n#  -33, N, -1                          #"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tinybf": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/brainfuck",
		"name": "tinyBF",
		"piggyback": "brainfuck",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "=++>+>>=+|+|=>+=>+++>+>+>+=>>>|=>=|>>++==>=++++++===>>+====>>==>=+==>>==>>===>>>===+++==>>==>>=+==>>>=+=="
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"tinylisp": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/Esolangs/tree/master/tinylisp",
		"name": "tinylisp",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(load library)\n(join (q (Hello, World!)) spc)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tir": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/ConorOBrien-Foxx/Tir",
		"name": "Tir",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Hello, World!⦀"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"tis": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Phlarx/tis",
		"name": "TIS",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "@0 \nMOV 72 DOWN \nMOV 101 DOWN \nMOV 108 DOWN \nMOV 108 DOWN \nMOV 111 DOWN \nMOV 44 DOWN \nMOV 32 DOWN \nMOV 87 DOWN \nMOV 111 DOWN \nMOV 114 DOWN \nMOV 108 DOWN \nMOV 100 DOWN \nMOV 33 DOWN \nMOV 10 DOWN \nHCF"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"1",
								"1"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"toi": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/kritixilithos/toi",
		"name": "Toi",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "uauauaua(<>{.}"
						}
					}
				],
				"response": "...."
			}
		},
		"update": "git"
	},
	"tmbww": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/MilkyWay90/Turing-Machine-But-Way-Worse",
		"name": "Turing Machine But Way Worse",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0 0 0 1 1 0 0\n0 1 1 1 2 0 0\n0 2 0 1 3 0 0\n0 3 0 1 4 0 0\n0 4 1 1 5 0 0\n0 5 0 1 6 0 0\n0 6 0 1 7 0 0\n0 7 0 1 8 1 0\n0 8 0 1 9 0 0\n0 9 1 1 10 0 0\n0 10 1 1 11 0 0\n0 11 0 1 12 0 0\n0 12 0 1 13 0 0\n0 13 1 1 14 0 0\n0 14 0 1 15 0 0\n0 15 1 1 16 1 0\n0 16 0 1 17 0 0\n0 17 1 1 18 0 0\n0 18 1 1 19 0 0\n0 19 0 1 20 0 0\n0 20 1 1 21 0 0\n0 21 1 1 22 0 0\n0 22 0 1 23 0 0\n0 23 0 1 24 1 0\n0 24 0 1 25 0 0\n0 25 1 1 26 0 0\n0 26 1 1 27 0 0\n0 27 0 1 28 0 0\n0 28 1 1 29 0 0\n0 29 1 1 30 0 0\n0 30 0 1 31 0 0\n0 31 0 1 32 1 0\n0 32 0 1 33 0 0\n0 33 1 1 34 0 0\n0 34 1 1 35 0 0\n0 35 0 1 36 0 0\n0 36 1 1 37 0 0\n0 37 1 1 38 0 0\n0 38 1 1 39 0 0\n0 39 1 1 40 1 0\n0 40 0 1 41 0 0\n0 41 0 1 42 0 0\n0 42 1 1 43 0 0\n0 43 0 1 44 0 0\n0 44 1 1 45 0 0\n0 45 1 1 46 0 0\n0 46 0 1 47 0 0\n0 47 0 1 48 1 0\n0 48 0 1 49 0 0\n0 49 0 1 50 0 0\n0 50 1 1 51 0 0\n0 51 0 1 52 0 0\n0 52 0 1 53 0 0\n0 53 0 1 54 0 0\n0 54 0 1 55 0 0\n0 55 0 1 56 1 0\n0 56 0 1 57 0 0\n0 57 1 1 58 0 0\n0 58 0 1 59 0 0\n0 59 1 1 60 0 0\n0 60 0 1 61 0 0\n0 61 1 1 62 0 0\n0 62 1 1 63 0 0\n0 63 1 1 64 1 0\n0 64 0 1 65 0 0\n0 65 1 1 66 0 0\n0 66 1 1 67 0 0\n0 67 0 1 68 0 0\n0 68 1 1 69 0 0\n0 69 1 1 70 0 0\n0 70 1 1 71 0 0\n0 71 1 1 72 1 0\n0 72 0 1 73 0 0\n0 73 1 1 74 0 0\n0 74 1 1 75 0 0\n0 75 1 1 76 0 0\n0 76 0 1 77 0 0\n0 77 0 1 78 0 0\n0 78 1 1 79 0 0\n0 79 0 1 80 1 0\n0 80 0 1 81 0 0\n0 81 1 1 82 0 0\n0 82 1 1 83 0 0\n0 83 0 1 84 0 0\n0 84 1 1 85 0 0\n0 85 1 1 86 0 0\n0 86 0 1 87 0 0\n0 87 0 1 88 1 0\n0 88 0 1 89 0 0\n0 89 1 1 90 0 0\n0 90 1 1 91 0 0\n0 91 0 1 92 0 0\n0 92 0 1 93 0 0\n0 93 1 1 94 0 0\n0 94 0 1 95 0 0\n0 95 0 1 96 1 0\n0 96 0 1 97 0 0\n0 97 0 1 98 0 0\n0 98 1 1 99 0 0\n0 99 0 1 100 0 0\n0 100 0 1 101 0 0\n0 101 0 1 102 0 0\n0 102 0 1 103 0 0\n0 103 1 1 104 1 1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"transcript": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://web.archive.org/web/20071018030927/http://www.corknut.org/code/transcript/",
		"name": "TRANSCRIPT",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "He is here.\n>HE, Hello, World!\n>X HE"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"trefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Trefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "q\"Hello, World!\"i#]:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"trefunge-98-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Trefunge-98 (PyFunge)",
		"piggyback": "befunge-98-pyfunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"triangular": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/aaronryank/triangular",
		"name": "Triangular",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "6\\6+@*8\\C::6--::@\\@#2\"+3^82*@3/#-<*#+/@\"#+F<3/3@@#-7:*<"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"triangularity": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Mr-Xcoder/Triangularity",
		"name": "Triangularity",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": ".... ....\n...\"!\"...\n..\"rld\"..\n.\"o, Wo\".\n\"Hell\"+++"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"trigger": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://yiap.nfshost.com/esoteric/trigger/trigger.html",
		"name": "Trigger",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "HHHeeelll#lllooo,,,   WWWooorrrlllddd!!!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"triple-threat": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/Triple-Threat",
		"name": "Triple Threat",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-31-10-12-23-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-31-10-12-23-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-22-23-13-31-12-23-33-31-12-23-33-31-12-23-33-31-12-23-33-31-12-23-33-22-21-12-23-31-12-23-30-12-23-22-23-13-31-12-23-33-12-23-22-23-13-31-12-23-33-12-23-22-21-12-23-12-23-22-23-13-31-12-23-33-12-23-31-10-31-12-23-33-12-23-31-12-23-30-31-12-23-33-22-21-12-23-31-12-23-30-12-23-12-23-12-23-31-12-22-23-32-23-33-12-23-22-21-22-21-22-21-12-23-31-12-22-23-32-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-31-12-22-23-32-23-33-12-23-31-12-22-23-32-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-31-12-22-23-32-23-33-12-23-12-23-12-23-31-12-22-23-32-23-33-31-12-23-33-22-21-12-23-31-12-22-23-32-23-33-31-12-23-33-12-23-31-12-22-23-32-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-31-12-22-23-32-23-33-22-21-22-21-22-21-22-21-22-21-22-21-12-23-31-12-22-23-32-23-33-22-21-22-21-22-21-22-21-22-21-22-21-22-21-22-21-12-23-31-12-22-23-32-23-33-12-23-12-23-22-23-13-31-12-23-33-12-23-31-12-22-23-32-23-33-12-23-22-23-13-31-12-23-33-22-23-13-31-12-23-33-12-23-31-12-22-23-32-23-33"
						}
					}
				],
				"response": "72\n101\n108\n108\n111\n32\n87\n111\n114\n108\n100\n33\n10"
			}
		},
		"update": "git"
	},
	"trumpscript": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/samshadwell/TrumpScript",
		"name": "TrumpScript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "say \"Hello, World!\"\nAmerica is great."
						}
					}
				],
				"response": "hello, world!"
			}
		},
		"update": "git"
	},
	"turtled": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Destructible-Watermelon/Turtl-d",
		"name": "Turtlèd",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"typescript": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.typescriptlang.org",
		"name": "TypeScript",
		"prettify": "javascript",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "console.log('Hello, World!')"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "npm"
	},
	"ubasic": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/EtchedPixels/ubasic",
		"name": "uBASIC",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "10 PRINT \"Hello, World!\"\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"underload": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/catseye/stringie",
		"name": "Underload",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(Hello, World!)S"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"unefunge-97-mtfi": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/TryItOnline/befunge-97-mtfi",
		"piggyback": "befunge-97-mtfi",
		"name": "Unefunge-97 (MTFI)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\">:#,_@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"unefunge-98-pyfunge": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://pythonhosted.org/PyFunge/",
		"name": "Unefunge-98 (PyFunge)",
		"piggyback": "befunge-98-pyfunge",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"9!dlroW ,olleH\"ck,@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "piggyback"
	},
	"unicat": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/gemdude46/unicat",
		"name": "Unicat",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "😻😹😸🙀🙀😹😹😸🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😼😽🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😼😸🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😺😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😿🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😾😺🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😽😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😼😼🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😼😹🙀🙀😽😼😸🙀🙀😻😹😸🙀🙀😹😺🙀🙀😽😼😸🙀🙀🙀🙀"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"unlambda": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "http://www.madore.org/~david/programs/unlambda/",
		"name": "Unlambda",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "`.!`.d`.l`.r``.W`. `.,``.l`c`.H.e.oi"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "version"
	},
	"uno": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Uno-No",
		"name": "Uno",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "O\"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"unreadable": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/Unreadable",
		"name": "Unreadable",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "'\"'\"\"'\"\"'\"\"'\"'\"'\"\"\"\"\"\"'\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"'\"\"'\"\"\"\"\"\"'\"\"'\"\"'\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"'\"\"'\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"'\"\"\"\"\"\"\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"'\"\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"\"\"\"\"\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"'\"\"'\"\"\"'\"'\"\"'\"\"'\"\"'\"'\"\"'\"\"'\"\"'\"\"\"\"\"\"\"'\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"'\"\"\"'\"'\"\"\"\"\"\"\"'\"\"'\"\"'\"\"'\"\"\"'\"'\"\"'\"\"\"\"\"\"\"'\"\"\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"ursala": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stasoid/Ursala",
		"name": "Ursala",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main=-[Hello, World!]-"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-s"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"v": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/DJMcMayhem/V",
		"name": "V (vim)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "cGHello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"v-fmota": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/v-fmota",
		"name": "V (FMota)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\\/>>>\\/\\\\/>\\/\\\\/>\\/\\\\>\\>\\\\>\\[/\\/>>>>\\[/\\/\\>>>\\[/\\/\\>>>>\\\\/>>\\/\\>>>/\\//\\//>\\/\\]/\\//>\\/\\]/\\//\\/>>>\\]/\\/\\\\\\\\./\\/\\\\/>>\\/\\\\/>\\/\\./\\/\\\\./\\/\\./\\/>\\>>>>\\>>>\\./\\/>\\\\/>>\\/\\\\[/\\/\\\\/>\\/\\./\\//\\//\\/\\]/\\/"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"vala": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://wiki.gnome.org/Projects/Vala",
		"name": "Vala",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "public static int main(string[] args) {\n\tstdout.printf(\"Hello, World!\\n\");\n\treturn 0;\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"var": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/machalvan/VAR/",
		"name": "VAR",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "OUT \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"vb-core": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.microsoft.com/net/core/platform",
		"name": "Visual Basic .NET (.NET Core)",
		"prettify": "vb",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Module Hello\n\tSub Main()\n\t\tConsole.WriteLine(\"Hello, World!\")\n\tEnd Sub\nEnd Module"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"verbosity": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Verbosity",
		"name": "Verbosity",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Include<Integer>\nInclude<MetaFunctions>\nInclude<Output>\nInclude<String>\n\nInteger:DefineVariable<IntegerOne; 1>\nOutput:DefineVariable<STDOUTfile; 0>\nString:DefineVariable<OutputString; \"Hello, World!\">\n\nString:RedefineVariable<OutputString; String:RemoveCharactersFromStart<OutputString; IntegerOne>>\nString:RedefineVariable<OutputString; String:TakeFirstCharacters<OutputString; IntegerOne>>\n\nOutput:DisplayAsText<STDOUTfile; OutputString>\n\nDefineMain<> [\n    MetaFunctions:ExecuteScript<MetaFunctions@FILE>\n]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"verbosity2": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Verbosity-v2",
		"name": "Verbosity v2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "IncludeTypePackage<OutputSystem>\nIncludeTypePackage<StringArray>\n\noutput = OutputSystem:NewOutput<DEFAULT>\n\nOutputSystem:DisplayAsText<output; \"Hello, World!\">"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"versert": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://mearie.org/projects/versert/",
		"name": "Versert",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "6~6*}2*~.{+7-~.~7+~..~3+~.~{8+~.~{4-~.~4*9-~.~8-~.~3+~.~6-~.~8-~.~{3-~.~2~5*~.@"
						}
					}
				],
				"response": "Hello, world!"
			}
		},
		"update": "hg"
	},
	"visual-basic-net-mono": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/languages/visualbasic/",
		"name": "Visual Basic .NET (Mono)",
		"prettify": "vb",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Module Hello\n\tSub Main()\n\t\tConsole.WriteLine(\"Hello, World!\")\n\tEnd Sub\nEnd Module"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"visual-basic-net-vbc": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.mono-project.com/docs/about-mono/releases/5.12.0/#vbnet-compiler",
		"name": "Visual Basic .NET (VBC)",
		"prettify": "vb",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "Module Hello\n\tSub Main()\n\t\tConsole.WriteLine(\"Hello, World!\")\n\tEnd Sub\nEnd Module"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "dnf"
	},
	"vitsy": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/VTCAKAVSMoACE/Vitsy",
		"name": "Vitsy",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"Z"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"vlang": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://vlang.io",
		"name": "V (vlang.io)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "fn main() {\n\tprint('Hello, World!')\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"vsl": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/vsl-lang/VSL",
		"name": "VSL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "func main() {\n  print(\"Hello, World!\")\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"wasm": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/wawrapper",
		"name": "WebAssembly (WaWrapper)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(data (i32.const 0) \"Hello, World!\")\n(func $main (result i32)\n i32.const 0\n i32.const 1\n i32.const 13\n get_global $stdout\n call $fwrite\n drop\n i32.const 0\n return)"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"waterfall": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://esolangs.org/wiki/The_Waterfall_Model",
		"name": "The Waterfall Model",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "[[27425257720894984227298396859546,\n      17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],\n [  2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2],\n [  3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 2, 2],\n [  3, 2, 2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2],\n [  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 0, 2, 2],\n [  3, 1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2],\n [  3, 2, 2, 2, 2, 2, 3, 1, 2, 2, 0, 2, 0, 4, 2, 0, 2, 2],\n [  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7],\n [  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 2],\n [  3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 2, 2, 2, 2, 2],\n [ 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [27425257720894984227298396859545,\n       1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1],\n [  3, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 9],\n [  3, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1],\n [239, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1],\n [  5, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1],\n [  3, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 3, 1],\n [  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]]"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"whirl": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://bigzaphod.github.io/Whirl/",
		"name": "Whirl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"whispers": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Whispers/tree/v1",
		"name": "Whispers v1",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "> \"Hello, World!\"\n>> Output 1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"whispers2": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/cairdcoinheringaahing/Whispers",
		"name": "Whispers v2",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "> \"Hello, World!\"\n>> Output 1"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"whitespace": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://web.archive.org/web/20150618184706/http://compsoc.dur.ac.uk/whitespace/tutorial.php",
		"name": "Whitespace",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "   \n  \t\t  \t \t \n  \t\t\t\t\n   \t\n   \t\t\t\n   \t  \n  \t\t \t  \n  \t\t  \t \t\t\n  \t\t\t\t\t\t\t\n   \t  \n   \t\n \n   \t\t\t \n  \t\t   \t\t\n\n  \n \n \n\t \t\n   \t\t \t \t\t\n\t   \t\n  \n \n\n\n  \t\n\n\n\n"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"width": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/stestoltz/Width",
		"name": "Width",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "GZiwWOwQROWIkilBAQWmkOCDmifGww"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"wierd": {
		"categories": [
			"recreational"
		],
		"encoding": "SBCS",
		"link": "https://github.com/catseye/Wierd",
		"name": "Wierd (John's)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "-*********************         !dlroW ,olleH\n *                  *\n R*     *    *     *\n E *   **    **   *\n T  *  **    **  *\n U   ***  ****  ****\n R     *  *  *      *\n N    *    *  ********\n      *  ****\n 0     **"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"wise": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Wheatwizard/Wise",
		"name": "Wise",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "~-<<<~-<<<::^~-<~-<<<~-<<~-:::^~-<<<~-^::?:>~-<~-:?::^~-<<~-<~-<<::^~-<<<<<:<::^<~-<<~-<~-<~-|!::^~-<~-<~-<<<~-<!:::^~-<<<^::^~-<<<<<~-"
						}
					},
					{
						"command": "V",
						"payload": {
							"args": [
								"-a"
							]
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"woefully": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Destructible-Watermelon/Woefully",
		"name": "Woefully",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "||||||||||| ||\n|||||||||| |||\n||||||||| ||||\n|||||||| |||||\n||||||| ||||||\n|||||| |||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n||||| ||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n|||| |||||||||\n||| ||||||||||\n||| ||||||||||\n||| ||||||||||\n||| ||||||||||\n||| ||||||||||\n|| |||||||||||\n|| |||||||||||\n|| |||||||||||\n|| |||||||||||\n|| |||||||||||\n||| ||||||||||\n|||| |||||||||\n||||| ||||||||\n|||||| |||||||\n||||||| ||||||\n|||||||| |||||\n||||||| ||||||\n|||||||| |||||\n||||||||| ||||\n|||||||||| |||\n||||||||||| ||\n|||||||||||| |\n||||||||||| ||"
						}
					}
				],
				"response": "@"
			}
		},
		"update": "git"
	},
	"wren": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/munificent/wren",
		"name": "Wren",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "System.print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"wsf": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dkudriavtsev/wsf",
		"name": "wsf",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": " \t \t \t \n \t \n \t \n \n   \n   \n \n  \n         \n  \n      \n  \n         \n \t \t \n      \t \t \t  \t\n\t\t  \t\n\t\t       \n\t \n \n \n\t\t \n \t \t \n \t\t\t \n\t\t\t\t   \n         \n      \t\t   \n \t \t \n\n  \n \t\t\t\t \t \n\t"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"wumpus": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/m-ender/wumpus",
		"name": "Wumpus",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "\"!dlroW ,olleH\"l&o@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "git"
	},
	"wyalhein": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/MilkyWay90/whenyouaccidentallylose100endorsementsinnationstates",
		"name": "W.Y.A.L.H.E.I.N.",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "946\n114\n***************************pK************pK*****************************pK******************************************************************pK****************************************************************************************************************************************************************pK*************************pK*********************************pK***pK*******************************************************pK***************************************************pK*********************************************************************************************************pK**********************************************************************pK*************************************************************************************************************************************************************************************************************************************pK"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"xeec": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "http://paulo-jorente.de/poncho/esolang/xEec/",
		"name": "xEec",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "h#10 h$! h$d h$l h$r h$o h$W h#32 h$, h$o h$l h$l h$e h$H >o o$ p jno"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "no-version"
	},
	"xeraph": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/xeraph",
		"name": "xeraph",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "l?$.\n~!dlroW ,olleH"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"yaball": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/TryItOnline/yaball",
		"name": "YABALL",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++++++++++++++++++++++++.+++++++..+++.-------------------------------------------------------------------.------------.+++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++++++++++++.+++.------.--------.-------------------------------------------------------------------.>@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"yabasic": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.yabasic.de",
		"name": "Yabasic",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"yash": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://yash.osdn.jp",
		"name": "yash",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "dnf"
	},
	"ybc": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://github.com/Leushenko/ybc",
		"name": "B (ybc)",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "main () {\n\tputs(\"Hello, World!\");\n\treturn(0);\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"yup": {
		"categories": [
			"recreational"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/ConorOBrien-Foxx/yup",
		"name": "yup",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "0e00e-0e00e----|00e00e--|00e00e00e----|00e00e00e----|--e|--e|--e@0e0e00e--00e00e----|00e00e00e--|00e00e--|--e--|--e|000e-0e00e--00e00e-----|--e-@0e00e-0e00e----|00e00e00e----|00e00e00e----|00e00e00e----|--e|--e|--e:@@0e00e00e----|00e00e00e----|--e|00e00e--00e00e----|00e00e00e----|--e|--e00e-0e-0e--@0e00e-0e00e----|00e00e00e----|00e00e00e----|--e00e-0e--|--e@0e00e-0e00e----|00e00e--|00e00e--00e00e----|--e|--e:@00e-0e-0e-|00e0e00e00e--|00e00e--|--e--|00e00e--00e00e--|00e00e--|--e--|--e-|--e@0e00e00e----|00e00e00e----|--e|00e00e--00e00e----|00e00e00e----|--e|--e00e-0e-0e--@0e00e--|00e00e00e----|--e|00e00e--00e00e----|00e00e00e--|00e00e--|--e--|--e0e-|--e@0e00e-0e00e----|00e00e00e----|00e00e00e----|00e00e00e----|--e|--e|--e@0e00e-0e00e----|00e00e00e--00e00e------|00e00e00e--00e00e------|--e|--e@00e--@"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"z3": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/Z3Prover/z3",
		"name": "Z3",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "(echo \"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	},
	"z80golf": {
		"categories": [
			"recreational"
		],
		"encoding": "xxd",
		"link": "https://github.com/lynn/z80golf",
		"name": "Z80Golf",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "00000000: dd 7e 0e b7 20 01 76 cd 00 80 dd 23 18 f2 48 65  .~.. .v....#..He\n00000010: 6c 6c 6f 2c 20 57 6f 72 6c 64 21                 llo, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"zephyr": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://github.com/dloscutoff/zephyr",
		"name": "Zephyr",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print \"Hello, World!\""
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "git"
	},
	"zig": {
		"categories": [
			"practical"
		],
		"encoding": "SBCS",
		"link": "https://ziglang.org/",
		"name": "Zig",
		"tab": "    ",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "const std = @import(\"std\");\n\npub fn main() !void {\n    var stdout_file = try std.io.getStdOut();\n    try stdout_file.write(\"Hello, World!\");\n}"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"cflags"
		],
		"update": "git"
	},
	"zkl": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "http://www.zenkinetic.com/zkl.html",
		"name": "zkl",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "print(\"Hello, World!\")"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "manual"
	},
	"zoidberg": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://metacpan.org/pod/Zoidberg",
		"name": "Zoidberg",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"unmask": [
			"options"
		],
		"update": "cpan"
	},
	"zsh": {
		"categories": [
			"practical"
		],
		"encoding": "UTF-8",
		"link": "https://www.zsh.org/",
		"name": "Zsh",
		"prettify": "sh",
		"tests": {
			"helloWorld": {
				"request": [
					{
						"command": "F",
						"payload": {
							".code.tio": "echo Hello, World!"
						}
					}
				],
				"response": "Hello, World!"
			}
		},
		"update": "dnf"
	}
}
