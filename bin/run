#!/usr/bin/env bash

range=$1
comm=$2
timeout_hard=$3
timeout_soft=$4
ip=$5
id=${range/:/.}
dir=/tmp/sandbox.$id
home=$dir/home
temp=$dir/tmp
context=unconfined_u:unconfined_r:sandbox_t:$range
lockfile=/tmp/runners.$ip

mkdir -p $home $temp
cd $dir
chcon -t sandbox_file_t -l $range $dir/*

flock -s $lockfile cgcreate -g cpu,memory,pids:runners/$ip/$id
cgset -r cpu.shares=128 runners/$ip
cgset -r cpu.shares=16 runners/$ip/$id
cgset -r memory.soft_limit_in_bytes=512M runners/$ip
cgset -r memory.soft_limit_in_bytes=128M runners/$ip/$id
cgset -r pids.max=640 runners/$ip
cgset -r pids.max=80 runners/$ip/$id

timeout --preserve-status --signal=KILL $timeout_hard \
	cgexec -g cpu,memory,pids:runners/$ip/$id \
	seunshare -h $home -t $temp -Z $context $comm $timeout_soft \
	1> >(head -c 128K > .output.tio) \
	2> >(head -c 128K > .debug.tio) \
	3> >(head -c 1024 > .error.tio)
status=$?

while killall -Z $range -KILL; do true; done
cgdelete -g cpu,memory,pids:runners/$ip/$id
flock -w 0 $lockfile cgdelete -g cpu,memory,pids:runners/$ip 2> /dev/null

[[ -s .error.tio ]] || printf '%16s' ''
cat .output.tio .debug.tio .error.tio
(( $(stat -c %s .output.tio) == 128 << 10 )) && echo "The output exceeded 128 KiB and was truncated."
(( $(stat -c %s .debug.tio) == 128 << 10 )) && echo "The debugging information exceeded 128 KiB and was truncated."
(( status == 124 )) && echo "The request exceeded the $timeout_soft second time limit and was terminated."
cd
rm -r $dir $lockfile
