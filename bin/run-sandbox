#!/usr/bin/env bash

error()
{
	echo "$1" >&3
	exit 1
}

cat_string()
{
	read_integer size
	head -c $size
}

read_integer()
{
	read_string "$1"
	((10#${!1} >= 0)) || error "'${!1}' is not an unsigned decimal integer literal."
}

read_string()
{
	IFS= read -d '' -r "$@"
}

export LANG=en_US.UTF8 PATH="/usr/local/bin:$PATH" TZ=UTC
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib
export LD_PRELOAD=libstdbuf.so:tiopreload.so
export _STDBUF_E=0 _STDBUF_I=0 _STDBUF_O=0

TIMEFORMAT=$'\nReal time: %3R s\nUser time: %3U s\nSys. time: %3S s\nCPU share: %P %'
separator=$(head -c 12 /dev/urandom | base64)
echo -en $separator >&3
wrappers=/srv/wrappers
timeout=$1
trap '' INT

while ((time_left = timeout - SECONDS, time_left > 0)) && read_string -N1 action; do case "$action" in
	C)	# clear all created files and variables
		GLOBIGNORE=.
		rm -rf *
		unset GLOBIGNORE ${!TIO_*} args lang
		;;
	D)	# delete file/directory
		read_string name
		rm -r "$name" || error "The file/directory '$name' could not be deleted."
		;;
	F)	# create file
		read_string name
		mkdir -p "$(dirname "$name")" && cat_string > "$name" || error "The file '$name' could not be created."
		;;
	R)	# run the code
		[[ $lang =~ ^[0-9A-Za-z-]+$ ]] && [[ -f $wrappers/$lang ]] || error "The language '$lang' could not be found on the server."
		echo -en $separator
		echo -en $separator >&2
		touch .code.tio .input.tio .env.tio
		chmod +x .code.tio
		time BASH_ENV=.env.tio timeout $time_left "$wrappers/$lang" "${args[@]}" 3>&-
		status=${PIPESTATUS[0]}
		printf 'Exit code: %u' $status >&2
		;;
	U)	# unset variable
		read_string name
		unset $name
		echo unset $name >> .env.tio
		;;
	V)	# declare variable
		read_string name
		[[ $name =~ ^(args|lang|TIO_[A-Z_]+)$ ]] || error "The variable '$name' could not be declared."
		declare -a "$name=()"
		read_integer length
		for ((index = 0; index < length; index++)); do read_string $name[$index]; done
		[[ $name =~ ^TIO_ ]] && declare -p $name >> .env.tio
		;;
	*)
		error "The instruction '$action' is not implemented."
esac; done

exit $[time_left == 0 && status == 124 ? 124 : 0]
